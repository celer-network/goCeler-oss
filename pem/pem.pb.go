// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pem.proto

package pem

import (
	fmt "fmt"
	rpc "github.com/celer-network/goCeler/rpc"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Next tag: 18
type PayMessageType int32

const (
	PayMessageType_UNDEFINED_TYPE                   PayMessageType = 0
	PayMessageType_COND_PAY_REQUEST                 PayMessageType = 1
	PayMessageType_COND_PAY_RESPONSE                PayMessageType = 2
	PayMessageType_COND_PAY_RECEIPT                 PayMessageType = 3
	PayMessageType_REVEAL_SECRET                    PayMessageType = 4
	PayMessageType_REVEAL_SECRET_ACK                PayMessageType = 5
	PayMessageType_PAY_SETTLE_PROOF                 PayMessageType = 6
	PayMessageType_PAY_SETTLE_REQUEST               PayMessageType = 7
	PayMessageType_PAY_SETTLE_RESPONSE              PayMessageType = 8
	PayMessageType_SEND_TOKEN_API                   PayMessageType = 9
	PayMessageType_SRC_SETTLE_EXPIRED_PAY_API       PayMessageType = 10
	PayMessageType_DST_SETTLE_EXPIRED_PAY_API       PayMessageType = 11
	PayMessageType_CONFIRM_ON_CHAIN_PAY_API         PayMessageType = 12
	PayMessageType_REJECT_BOOLEAN_PAY_API           PayMessageType = 13
	PayMessageType_SETTLE_ON_CHAIN_RESOLVED_PAY_API PayMessageType = 14
	PayMessageType_WITHDRAW_REQUEST                 PayMessageType = 15
	PayMessageType_WITHDRAW_RESPONSE                PayMessageType = 16
	PayMessageType_CONFIRM_BOOLEAN_PAY_API          PayMessageType = 17
	PayMessageType_ROUTING_REQUEST                  PayMessageType = 18
)

var PayMessageType_name = map[int32]string{
	0:  "UNDEFINED_TYPE",
	1:  "COND_PAY_REQUEST",
	2:  "COND_PAY_RESPONSE",
	3:  "COND_PAY_RECEIPT",
	4:  "REVEAL_SECRET",
	5:  "REVEAL_SECRET_ACK",
	6:  "PAY_SETTLE_PROOF",
	7:  "PAY_SETTLE_REQUEST",
	8:  "PAY_SETTLE_RESPONSE",
	9:  "SEND_TOKEN_API",
	10: "SRC_SETTLE_EXPIRED_PAY_API",
	11: "DST_SETTLE_EXPIRED_PAY_API",
	12: "CONFIRM_ON_CHAIN_PAY_API",
	13: "REJECT_BOOLEAN_PAY_API",
	14: "SETTLE_ON_CHAIN_RESOLVED_PAY_API",
	15: "WITHDRAW_REQUEST",
	16: "WITHDRAW_RESPONSE",
	17: "CONFIRM_BOOLEAN_PAY_API",
	18: "ROUTING_REQUEST",
}

var PayMessageType_value = map[string]int32{
	"UNDEFINED_TYPE":                   0,
	"COND_PAY_REQUEST":                 1,
	"COND_PAY_RESPONSE":                2,
	"COND_PAY_RECEIPT":                 3,
	"REVEAL_SECRET":                    4,
	"REVEAL_SECRET_ACK":                5,
	"PAY_SETTLE_PROOF":                 6,
	"PAY_SETTLE_REQUEST":               7,
	"PAY_SETTLE_RESPONSE":              8,
	"SEND_TOKEN_API":                   9,
	"SRC_SETTLE_EXPIRED_PAY_API":       10,
	"DST_SETTLE_EXPIRED_PAY_API":       11,
	"CONFIRM_ON_CHAIN_PAY_API":         12,
	"REJECT_BOOLEAN_PAY_API":           13,
	"SETTLE_ON_CHAIN_RESOLVED_PAY_API": 14,
	"WITHDRAW_REQUEST":                 15,
	"WITHDRAW_RESPONSE":                16,
	"CONFIRM_BOOLEAN_PAY_API":          17,
	"ROUTING_REQUEST":                  18,
}

func (x PayMessageType) String() string {
	return proto.EnumName(PayMessageType_name, int32(x))
}

func (PayMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bd0bc1b1d60b57a8, []int{0}
}

// Next tag: 27
type PayEventMessage struct {
	Type PayMessageType `protobuf:"varint,1,opt,name=type,proto3,enum=pem.PayMessageType" json:"type,omitempty"`
	// pay_id this message is about.
	PayId string `protobuf:"bytes,2,opt,name=pay_id,json=payId,proto3" json:"pay_id,omitempty"`
	// token used by the pay.
	Token string `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	// message src
	Src string `protobuf:"bytes,5,opt,name=src,proto3" json:"src,omitempty"`
	// message dst
	Dst string `protobuf:"bytes,6,opt,name=dst,proto3" json:"dst,omitempty"`
	// direct peer the message comes from.
	MsgFrom string `protobuf:"bytes,7,opt,name=msg_from,json=msgFrom,proto3" json:"msg_from,omitempty"`
	// secret of the pay hash lock.
	Secret string `protobuf:"bytes,8,opt,name=secret,proto3" json:"secret,omitempty"`
	// reason of pay settlement
	SettleReason rpc.PaymentSettleReason `protobuf:"varint,9,opt,name=settle_reason,json=settleReason,proto3,enum=rpc.PaymentSettleReason" json:"settle_reason,omitempty"`
	// direct peer the message goes to.
	MsgTo string `protobuf:"bytes,10,opt,name=msg_to,json=msgTo,proto3" json:"msg_to,omitempty"`
	// which machine processed the message
	Machine string `protobuf:"bytes,11,opt,name=machine,proto3" json:"machine,omitempty"`
	// cid this message comes from
	FromCid string `protobuf:"bytes,12,opt,name=from_cid,json=fromCid,proto3" json:"from_cid,omitempty"`
	// cid this message goes to
	ToCid string `protobuf:"bytes,13,opt,name=to_cid,json=toCid,proto3" json:"to_cid,omitempty"`
	// error occured during message processing
	Error []string `protobuf:"bytes,14,rep,name=error,proto3" json:"error,omitempty"`
	// start timestamp of message processing
	StartTimeStamp int64 `protobuf:"varint,15,opt,name=start_time_stamp,json=startTimeStamp,proto3" json:"start_time_stamp,omitempty"`
	// end timestamp of message processing
	EndTimeStamp int64 `protobuf:"varint,16,opt,name=end_time_stamp,json=endTimeStamp,proto3" json:"end_time_stamp,omitempty"`
	// execution time in milliseconds
	ExecutionTimeMs float32 `protobuf:"fixed32,17,opt,name=execution_time_ms,json=executionTimeMs,proto3" json:"execution_time_ms,omitempty"`
	// if exists in ack msg, the message may contains several pays and this field is complete pay id set.
	PayIds []string `protobuf:"bytes,20,rep,name=pay_ids,json=payIds,proto3" json:"pay_ids,omitempty"`
	// if exists in nack msg, the message may contains several pays and this field is complete pay id set.
	NackPayIds []string `protobuf:"bytes,21,rep,name=nack_pay_ids,json=nackPayIds,proto3" json:"nack_pay_ids,omitempty"`
	// indicating if this machine that processes the message is forwarding out message outside the OSP.
	ForwardingExternal bool `protobuf:"varint,22,opt,name=forwarding_external,json=forwardingExternal,proto3" json:"forwarding_external,omitempty"`
	// simplex sequence numbers
	SeqNums *SimplexSeqNums `protobuf:"bytes,23,opt,name=seq_nums,json=seqNums,proto3" json:"seq_nums,omitempty"`
	// error returned in the nack message
	Nack *rpc.Error `protobuf:"bytes,24,opt,name=nack,proto3" json:"nack,omitempty"`
	// resend messages due to nack
	Resend []*PayEventMessage `protobuf:"bytes,25,rep,name=resend,proto3" json:"resend,omitempty"`
	// event is part of a direct-payment
	DirectPay bool `protobuf:"varint,26,opt,name=direct_pay,json=directPay,proto3" json:"direct_pay,omitempty"`
	// When filled, it means the node tries to delegate receiving the pay. This field logs delegation description
	DelegationDescription *rpc.DelegationDescription `protobuf:"bytes,27,opt,name=delegation_description,json=delegationDescription,proto3" json:"delegation_description,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                   `json:"-"`
	XXX_unrecognized      []byte                     `json:"-"`
	XXX_sizecache         int32                      `json:"-"`
}

func (m *PayEventMessage) Reset()         { *m = PayEventMessage{} }
func (m *PayEventMessage) String() string { return proto.CompactTextString(m) }
func (*PayEventMessage) ProtoMessage()    {}
func (*PayEventMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd0bc1b1d60b57a8, []int{0}
}

func (m *PayEventMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PayEventMessage.Unmarshal(m, b)
}
func (m *PayEventMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PayEventMessage.Marshal(b, m, deterministic)
}
func (m *PayEventMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayEventMessage.Merge(m, src)
}
func (m *PayEventMessage) XXX_Size() int {
	return xxx_messageInfo_PayEventMessage.Size(m)
}
func (m *PayEventMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_PayEventMessage.DiscardUnknown(m)
}

var xxx_messageInfo_PayEventMessage proto.InternalMessageInfo

func (m *PayEventMessage) GetType() PayMessageType {
	if m != nil {
		return m.Type
	}
	return PayMessageType_UNDEFINED_TYPE
}

func (m *PayEventMessage) GetPayId() string {
	if m != nil {
		return m.PayId
	}
	return ""
}

func (m *PayEventMessage) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *PayEventMessage) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *PayEventMessage) GetDst() string {
	if m != nil {
		return m.Dst
	}
	return ""
}

func (m *PayEventMessage) GetMsgFrom() string {
	if m != nil {
		return m.MsgFrom
	}
	return ""
}

func (m *PayEventMessage) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *PayEventMessage) GetSettleReason() rpc.PaymentSettleReason {
	if m != nil {
		return m.SettleReason
	}
	return rpc.PaymentSettleReason_NONE
}

func (m *PayEventMessage) GetMsgTo() string {
	if m != nil {
		return m.MsgTo
	}
	return ""
}

func (m *PayEventMessage) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

func (m *PayEventMessage) GetFromCid() string {
	if m != nil {
		return m.FromCid
	}
	return ""
}

func (m *PayEventMessage) GetToCid() string {
	if m != nil {
		return m.ToCid
	}
	return ""
}

func (m *PayEventMessage) GetError() []string {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *PayEventMessage) GetStartTimeStamp() int64 {
	if m != nil {
		return m.StartTimeStamp
	}
	return 0
}

func (m *PayEventMessage) GetEndTimeStamp() int64 {
	if m != nil {
		return m.EndTimeStamp
	}
	return 0
}

func (m *PayEventMessage) GetExecutionTimeMs() float32 {
	if m != nil {
		return m.ExecutionTimeMs
	}
	return 0
}

func (m *PayEventMessage) GetPayIds() []string {
	if m != nil {
		return m.PayIds
	}
	return nil
}

func (m *PayEventMessage) GetNackPayIds() []string {
	if m != nil {
		return m.NackPayIds
	}
	return nil
}

func (m *PayEventMessage) GetForwardingExternal() bool {
	if m != nil {
		return m.ForwardingExternal
	}
	return false
}

func (m *PayEventMessage) GetSeqNums() *SimplexSeqNums {
	if m != nil {
		return m.SeqNums
	}
	return nil
}

func (m *PayEventMessage) GetNack() *rpc.Error {
	if m != nil {
		return m.Nack
	}
	return nil
}

func (m *PayEventMessage) GetResend() []*PayEventMessage {
	if m != nil {
		return m.Resend
	}
	return nil
}

func (m *PayEventMessage) GetDirectPay() bool {
	if m != nil {
		return m.DirectPay
	}
	return false
}

func (m *PayEventMessage) GetDelegationDescription() *rpc.DelegationDescription {
	if m != nil {
		return m.DelegationDescription
	}
	return nil
}

type SimplexSeqNums struct {
	// sequence number sent in outgoing message.
	Out uint64 `protobuf:"varint,1,opt,name=out,proto3" json:"out,omitempty"`
	// base of sequence number sent in outgoing message.
	OutBase uint64 `protobuf:"varint,2,opt,name=out_base,json=outBase,proto3" json:"out_base,omitempty"`
	// sequence number of received message
	In uint64 `protobuf:"varint,3,opt,name=in,proto3" json:"in,omitempty"`
	// base sequence number of received message
	InBase uint64 `protobuf:"varint,4,opt,name=in_base,json=inBase,proto3" json:"in_base,omitempty"`
	// stored co-signed simplex sequence number
	Stored uint64 `protobuf:"varint,5,opt,name=stored,proto3" json:"stored,omitempty"`
	// sequence number acked by the message
	Ack uint64 `protobuf:"varint,6,opt,name=ack,proto3" json:"ack,omitempty"`
	// highest inflight sequence number, usually needed only when there is a nack to trigger resend
	LastInflight         uint64   `protobuf:"varint,7,opt,name=last_inflight,json=lastInflight,proto3" json:"last_inflight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimplexSeqNums) Reset()         { *m = SimplexSeqNums{} }
func (m *SimplexSeqNums) String() string { return proto.CompactTextString(m) }
func (*SimplexSeqNums) ProtoMessage()    {}
func (*SimplexSeqNums) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd0bc1b1d60b57a8, []int{1}
}

func (m *SimplexSeqNums) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimplexSeqNums.Unmarshal(m, b)
}
func (m *SimplexSeqNums) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimplexSeqNums.Marshal(b, m, deterministic)
}
func (m *SimplexSeqNums) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimplexSeqNums.Merge(m, src)
}
func (m *SimplexSeqNums) XXX_Size() int {
	return xxx_messageInfo_SimplexSeqNums.Size(m)
}
func (m *SimplexSeqNums) XXX_DiscardUnknown() {
	xxx_messageInfo_SimplexSeqNums.DiscardUnknown(m)
}

var xxx_messageInfo_SimplexSeqNums proto.InternalMessageInfo

func (m *SimplexSeqNums) GetOut() uint64 {
	if m != nil {
		return m.Out
	}
	return 0
}

func (m *SimplexSeqNums) GetOutBase() uint64 {
	if m != nil {
		return m.OutBase
	}
	return 0
}

func (m *SimplexSeqNums) GetIn() uint64 {
	if m != nil {
		return m.In
	}
	return 0
}

func (m *SimplexSeqNums) GetInBase() uint64 {
	if m != nil {
		return m.InBase
	}
	return 0
}

func (m *SimplexSeqNums) GetStored() uint64 {
	if m != nil {
		return m.Stored
	}
	return 0
}

func (m *SimplexSeqNums) GetAck() uint64 {
	if m != nil {
		return m.Ack
	}
	return 0
}

func (m *SimplexSeqNums) GetLastInflight() uint64 {
	if m != nil {
		return m.LastInflight
	}
	return 0
}

func init() {
	proto.RegisterEnum("pem.PayMessageType", PayMessageType_name, PayMessageType_value)
	proto.RegisterType((*PayEventMessage)(nil), "pem.PayEventMessage")
	proto.RegisterType((*SimplexSeqNums)(nil), "pem.SimplexSeqNums")
}

func init() { proto.RegisterFile("pem.proto", fileDescriptor_bd0bc1b1d60b57a8) }

var fileDescriptor_bd0bc1b1d60b57a8 = []byte{
	// 929 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x95, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0xc7, 0xe7, 0xd8, 0xb1, 0x93, 0x13, 0xdb, 0x51, 0x98, 0x2f, 0x36, 0xdd, 0x0a, 0xa3, 0x0b,
	0x36, 0xa3, 0xd8, 0x1c, 0xa0, 0xbb, 0xde, 0x85, 0x63, 0x33, 0xab, 0xd7, 0x44, 0x52, 0x29, 0xa5,
	0x5d, 0x77, 0x43, 0x28, 0xd2, 0x89, 0x23, 0xc4, 0xfa, 0xa8, 0x48, 0xaf, 0xf1, 0x83, 0xed, 0x35,
	0xf6, 0x22, 0x7b, 0x89, 0x81, 0x94, 0xec, 0x38, 0xc5, 0x7a, 0xa7, 0xf3, 0xfb, 0xff, 0xc9, 0x73,
	0x0e, 0xc9, 0x03, 0xc1, 0x76, 0x8e, 0xc9, 0x20, 0x2f, 0x32, 0x95, 0x91, 0x7a, 0x8e, 0xc9, 0x49,
	0x27, 0x41, 0x29, 0x83, 0x29, 0x96, 0xec, 0xe5, 0x3f, 0x4d, 0xd8, 0x75, 0x83, 0x05, 0xfb, 0x0b,
	0x53, 0x75, 0x55, 0x2a, 0xe4, 0x47, 0x68, 0xa8, 0x45, 0x8e, 0xb4, 0xd6, 0xab, 0xf5, 0xbb, 0xaf,
	0xf7, 0x07, 0x7a, 0x07, 0x37, 0x58, 0x54, 0xb2, 0xbf, 0xc8, 0x91, 0x1b, 0x03, 0x39, 0x84, 0x66,
	0x1e, 0x2c, 0x44, 0x1c, 0xd1, 0x8d, 0x5e, 0xad, 0xbf, 0xcd, 0x37, 0xf3, 0x60, 0x31, 0x89, 0xc8,
	0x01, 0x6c, 0xaa, 0xec, 0x1e, 0x53, 0x5a, 0x2f, 0xa9, 0x09, 0x88, 0x05, 0x75, 0x59, 0x84, 0x74,
	0xd3, 0x30, 0xfd, 0xa9, 0x49, 0x24, 0x15, 0x6d, 0x96, 0x24, 0x92, 0x8a, 0x3c, 0x83, 0xad, 0x44,
	0x4e, 0xc5, 0x6d, 0x91, 0x25, 0xb4, 0x65, 0x70, 0x2b, 0x91, 0xd3, 0x8b, 0x22, 0x4b, 0xc8, 0x11,
	0x34, 0x25, 0x86, 0x05, 0x2a, 0xba, 0x65, 0x84, 0x2a, 0x22, 0xbf, 0x42, 0x47, 0xa2, 0x52, 0x33,
	0x14, 0x05, 0x06, 0x32, 0x4b, 0xe9, 0xb6, 0xa9, 0x9a, 0x0e, 0x8a, 0x3c, 0xd4, 0x55, 0x27, 0x98,
	0x2a, 0xcf, 0x18, 0xb8, 0xd1, 0x79, 0x5b, 0xae, 0x45, 0xba, 0x05, 0x9d, 0x51, 0x65, 0x14, 0xca,
	0x62, 0x13, 0x39, 0xf5, 0x33, 0x42, 0xa1, 0x95, 0x04, 0xe1, 0x5d, 0x9c, 0x22, 0xdd, 0xa9, 0xea,
	0x28, 0x43, 0x5d, 0xa2, 0x2e, 0x4f, 0x84, 0x71, 0x44, 0xdb, 0xa5, 0xa4, 0xe3, 0x51, 0x1c, 0xe9,
	0xbd, 0x54, 0x66, 0x84, 0xce, 0xb2, 0x71, 0x8d, 0x0f, 0x60, 0x13, 0x8b, 0x22, 0x2b, 0x68, 0xb7,
	0x57, 0xd7, 0xd4, 0x04, 0xa4, 0x0f, 0x96, 0x54, 0x41, 0xa1, 0x84, 0x8a, 0x13, 0x14, 0x52, 0x05,
	0x49, 0x4e, 0x77, 0x7b, 0xb5, 0x7e, 0x9d, 0x77, 0x0d, 0xf7, 0xe3, 0x04, 0x3d, 0x4d, 0xc9, 0x29,
	0x74, 0x31, 0x8d, 0xd6, 0x7d, 0x96, 0xf1, 0xb5, 0x31, 0x8d, 0x1e, 0x5d, 0xaf, 0x60, 0x0f, 0x1f,
	0x30, 0x9c, 0xab, 0x38, 0x4b, 0x4b, 0x6f, 0x22, 0xe9, 0x5e, 0xaf, 0xd6, 0xdf, 0xe0, 0xbb, 0x2b,
	0x41, 0xdb, 0xaf, 0x24, 0x39, 0x86, 0x56, 0x79, 0x6f, 0x92, 0x1e, 0x98, 0x9a, 0x9a, 0xe6, 0xe2,
	0x24, 0xe9, 0x41, 0x3b, 0x0d, 0xc2, 0x7b, 0xb1, 0x54, 0x0f, 0x8d, 0x0a, 0x9a, 0xb9, 0xa5, 0xe3,
	0x0c, 0xf6, 0x6f, 0xb3, 0xe2, 0x73, 0x50, 0x44, 0x71, 0x3a, 0x15, 0xf8, 0xa0, 0xb0, 0x48, 0x83,
	0x19, 0x3d, 0xea, 0xd5, 0xfa, 0x5b, 0x9c, 0x3c, 0x4a, 0xac, 0x52, 0xc8, 0x00, 0xb6, 0x24, 0x7e,
	0x12, 0xe9, 0x3c, 0x91, 0xf4, 0xb8, 0x57, 0xeb, 0xef, 0x54, 0x0f, 0xca, 0x8b, 0x93, 0x7c, 0x86,
	0x0f, 0x1e, 0x7e, 0xb2, 0xe7, 0x89, 0xe4, 0x2d, 0x59, 0x7e, 0x90, 0x17, 0xd0, 0xd0, 0xe9, 0x28,
	0x35, 0x5e, 0x30, 0xd7, 0xc8, 0xf4, 0x89, 0x71, 0xc3, 0xc9, 0x4f, 0xd0, 0x2c, 0x50, 0x62, 0x1a,
	0xd1, 0x67, 0xbd, 0x7a, 0x7f, 0xe7, 0xf5, 0xc1, 0xf2, 0x79, 0xae, 0x3f, 0x61, 0x5e, 0x79, 0xc8,
	0x77, 0x00, 0x51, 0x5c, 0x60, 0xa8, 0x74, 0x4b, 0xf4, 0xc4, 0x54, 0xb9, 0x5d, 0x12, 0x37, 0x58,
	0x90, 0x77, 0x70, 0x14, 0xe1, 0x0c, 0xa7, 0x81, 0x39, 0xb5, 0x08, 0x65, 0x58, 0xc4, 0xb9, 0xfe,
	0xa6, 0xcf, 0x4d, 0xfa, 0x13, 0x93, 0x7e, 0xbc, 0xb2, 0x8c, 0x1f, 0x1d, 0xfc, 0x30, 0xfa, 0x3f,
	0xfc, 0xf2, 0xef, 0x1a, 0x74, 0x9f, 0xf6, 0xa6, 0xdf, 0x79, 0x36, 0x57, 0x66, 0x9c, 0x1a, 0x5c,
	0x7f, 0xea, 0x47, 0x94, 0xcd, 0x95, 0xb8, 0x09, 0x24, 0x9a, 0xd1, 0x69, 0xf0, 0x56, 0x36, 0x57,
	0xe7, 0x81, 0x44, 0xd2, 0x85, 0x8d, 0xb8, 0x9c, 0x9c, 0x06, 0xdf, 0x88, 0x53, 0x7d, 0x57, 0x71,
	0x5a, 0x3a, 0x1b, 0x06, 0x36, 0xe3, 0xd4, 0x18, 0xf5, 0x40, 0xa8, 0xac, 0xc0, 0xc8, 0x8c, 0x54,
	0x83, 0x57, 0x91, 0xce, 0xa6, 0xcf, 0xaf, 0x59, 0x66, 0xd3, 0x47, 0xf6, 0x3d, 0x74, 0x66, 0x81,
	0x54, 0x22, 0x4e, 0x6f, 0x67, 0xf1, 0xf4, 0x4e, 0x99, 0xd1, 0x6a, 0xf0, 0xb6, 0x86, 0x93, 0x8a,
	0xbd, 0xfa, 0xb7, 0x0e, 0xdd, 0xa7, 0x43, 0x4e, 0x08, 0x74, 0xaf, 0xed, 0x31, 0xbb, 0x98, 0xd8,
	0x6c, 0x2c, 0xfc, 0x8f, 0x2e, 0xb3, 0xbe, 0x21, 0x07, 0x60, 0x8d, 0x1c, 0x7b, 0x2c, 0xdc, 0xe1,
	0x47, 0xc1, 0xd9, 0xbb, 0x6b, 0xe6, 0xf9, 0x56, 0x8d, 0x1c, 0xc2, 0xde, 0x1a, 0xf5, 0x5c, 0xc7,
	0xf6, 0x98, 0xb5, 0xf1, 0x85, 0x79, 0xc4, 0x26, 0xae, 0x6f, 0xd5, 0xc9, 0x1e, 0x74, 0x38, 0x7b,
	0xcf, 0x86, 0x97, 0xc2, 0x63, 0x23, 0xce, 0x7c, 0xab, 0xa1, 0xd7, 0x3f, 0x41, 0x62, 0x38, 0x7a,
	0x6b, 0x6d, 0xea, 0xf5, 0x7a, 0xa9, 0xc7, 0x7c, 0xff, 0x92, 0x09, 0x97, 0x3b, 0xce, 0x85, 0xd5,
	0x24, 0x47, 0x40, 0xd6, 0xe8, 0xb2, 0x88, 0x16, 0x39, 0x86, 0xfd, 0x27, 0xbc, 0x2a, 0x63, 0x4b,
	0xf7, 0xe1, 0x31, 0x7b, 0x2c, 0x7c, 0xe7, 0x2d, 0xb3, 0xc5, 0xd0, 0x9d, 0x58, 0xdb, 0xe4, 0x05,
	0x9c, 0x78, 0x7c, 0xb4, 0x34, 0xb3, 0x3f, 0xdc, 0x09, 0x67, 0x65, 0xa1, 0x5a, 0x07, 0xad, 0x8f,
	0x3d, 0xff, 0x6b, 0xfa, 0x0e, 0xf9, 0x16, 0xe8, 0xc8, 0xb1, 0x2f, 0x26, 0xfc, 0x4a, 0x38, 0xb6,
	0x18, 0xbd, 0x19, 0x4e, 0xec, 0x95, 0xda, 0x26, 0x27, 0x70, 0xc4, 0xd9, 0xef, 0x6c, 0xe4, 0x8b,
	0x73, 0xc7, 0xb9, 0x64, 0xc3, 0x47, 0xad, 0x43, 0x4e, 0xa1, 0x57, 0xed, 0xba, 0x5a, 0xc8, 0x99,
	0xe7, 0x5c, 0xbe, 0x5f, 0xdb, 0xbf, 0xab, 0x5b, 0xff, 0x30, 0xf1, 0xdf, 0x8c, 0xf9, 0xf0, 0xc3,
	0xaa, 0xc5, 0x5d, 0x7d, 0x4e, 0x6b, 0xb4, 0x6a, 0xd0, 0x22, 0xcf, 0xe1, 0x78, 0x59, 0xcc, 0x97,
	0xf9, 0xf6, 0xc8, 0x3e, 0xec, 0x72, 0xe7, 0xda, 0x9f, 0xd8, 0xbf, 0xad, 0x36, 0x22, 0xe7, 0x3f,
	0xfc, 0x79, 0x3a, 0x8d, 0xd5, 0xdd, 0xfc, 0x66, 0x10, 0x66, 0xc9, 0x59, 0x88, 0x33, 0x2c, 0x7e,
	0x4e, 0x51, 0x7d, 0xce, 0x8a, 0xfb, 0xb3, 0x69, 0x36, 0xd2, 0xf1, 0x59, 0x8e, 0xc9, 0x4d, 0xd3,
	0xfc, 0x25, 0x7e, 0xf9, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xef, 0x90, 0x75, 0xff, 0x46, 0x06, 0x00,
	0x00,
}
