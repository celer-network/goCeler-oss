// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package testapp

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SimpleSingleSessionAppWithOracleABI is the input ABI used to generate the binding from.
const SimpleSingleSessionAppWithOracleABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_oracleProof\",\"type\":\"bytes\"}],\"name\":\"settleBySigTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracleProof\",\"type\":\"bytes\"},{\"name\":\"_cosignedStateProof\",\"type\":\"bytes\"}],\"name\":\"settleByInvalidTurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_query\",\"type\":\"bytes\"}],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracleProof\",\"type\":\"bytes\"}],\"name\":\"settleByMoveTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracleProof\",\"type\":\"bytes\"},{\"name\":\"_cosignedStateProof\",\"type\":\"bytes\"}],\"name\":\"settleByInvalidState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_players\",\"type\":\"address[]\"},{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_sigTimeout\",\"type\":\"uint256\"},{\"name\":\"_moveTimeout\",\"type\":\"uint256\"},{\"name\":\"_oracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SigTimeoutDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MoveTimeoutDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InvalidTurnDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"InvalidStateDispute\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"name\":\"_query\",\"type\":\"bytes\"}],\"name\":\"getOutcome\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_key\",\"type\":\"uint256\"}],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// SimpleSingleSessionAppWithOracleBin is the compiled bytecode used for deploying new contracts.
const SimpleSingleSessionAppWithOracleBin = ``

// DeploySimpleSingleSessionAppWithOracle deploys a new Ethereum contract, binding an instance of SimpleSingleSessionAppWithOracle to it.
func DeploySimpleSingleSessionAppWithOracle(auth *bind.TransactOpts, backend bind.ContractBackend, _players []common.Address, _nonce *big.Int, _sigTimeout *big.Int, _moveTimeout *big.Int, _oracle common.Address) (common.Address, *types.Transaction, *SimpleSingleSessionAppWithOracle, error) {
	parsed, err := abi.JSON(strings.NewReader(SimpleSingleSessionAppWithOracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SimpleSingleSessionAppWithOracleBin), backend, _players, _nonce, _sigTimeout, _moveTimeout, _oracle)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleSingleSessionAppWithOracle{SimpleSingleSessionAppWithOracleCaller: SimpleSingleSessionAppWithOracleCaller{contract: contract}, SimpleSingleSessionAppWithOracleTransactor: SimpleSingleSessionAppWithOracleTransactor{contract: contract}, SimpleSingleSessionAppWithOracleFilterer: SimpleSingleSessionAppWithOracleFilterer{contract: contract}}, nil
}

// SimpleSingleSessionAppWithOracle is an auto generated Go binding around an Ethereum contract.
type SimpleSingleSessionAppWithOracle struct {
	SimpleSingleSessionAppWithOracleCaller     // Read-only binding to the contract
	SimpleSingleSessionAppWithOracleTransactor // Write-only binding to the contract
	SimpleSingleSessionAppWithOracleFilterer   // Log filterer for contract events
}

// SimpleSingleSessionAppWithOracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleSingleSessionAppWithOracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleSingleSessionAppWithOracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleSingleSessionAppWithOracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleSingleSessionAppWithOracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleSingleSessionAppWithOracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleSingleSessionAppWithOracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleSingleSessionAppWithOracleSession struct {
	Contract     *SimpleSingleSessionAppWithOracle // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                     // Call options to use throughout this session
	TransactOpts bind.TransactOpts                 // Transaction auth options to use throughout this session
}

// SimpleSingleSessionAppWithOracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleSingleSessionAppWithOracleCallerSession struct {
	Contract *SimpleSingleSessionAppWithOracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                           // Call options to use throughout this session
}

// SimpleSingleSessionAppWithOracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleSingleSessionAppWithOracleTransactorSession struct {
	Contract     *SimpleSingleSessionAppWithOracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                           // Transaction auth options to use throughout this session
}

// SimpleSingleSessionAppWithOracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleSingleSessionAppWithOracleRaw struct {
	Contract *SimpleSingleSessionAppWithOracle // Generic contract binding to access the raw methods on
}

// SimpleSingleSessionAppWithOracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleSingleSessionAppWithOracleCallerRaw struct {
	Contract *SimpleSingleSessionAppWithOracleCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleSingleSessionAppWithOracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleSingleSessionAppWithOracleTransactorRaw struct {
	Contract *SimpleSingleSessionAppWithOracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleSingleSessionAppWithOracle creates a new instance of SimpleSingleSessionAppWithOracle, bound to a specific deployed contract.
func NewSimpleSingleSessionAppWithOracle(address common.Address, backend bind.ContractBackend) (*SimpleSingleSessionAppWithOracle, error) {
	contract, err := bindSimpleSingleSessionAppWithOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleSingleSessionAppWithOracle{SimpleSingleSessionAppWithOracleCaller: SimpleSingleSessionAppWithOracleCaller{contract: contract}, SimpleSingleSessionAppWithOracleTransactor: SimpleSingleSessionAppWithOracleTransactor{contract: contract}, SimpleSingleSessionAppWithOracleFilterer: SimpleSingleSessionAppWithOracleFilterer{contract: contract}}, nil
}

// NewSimpleSingleSessionAppWithOracleCaller creates a new read-only instance of SimpleSingleSessionAppWithOracle, bound to a specific deployed contract.
func NewSimpleSingleSessionAppWithOracleCaller(address common.Address, caller bind.ContractCaller) (*SimpleSingleSessionAppWithOracleCaller, error) {
	contract, err := bindSimpleSingleSessionAppWithOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleSingleSessionAppWithOracleCaller{contract: contract}, nil
}

// NewSimpleSingleSessionAppWithOracleTransactor creates a new write-only instance of SimpleSingleSessionAppWithOracle, bound to a specific deployed contract.
func NewSimpleSingleSessionAppWithOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleSingleSessionAppWithOracleTransactor, error) {
	contract, err := bindSimpleSingleSessionAppWithOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleSingleSessionAppWithOracleTransactor{contract: contract}, nil
}

// NewSimpleSingleSessionAppWithOracleFilterer creates a new log filterer instance of SimpleSingleSessionAppWithOracle, bound to a specific deployed contract.
func NewSimpleSingleSessionAppWithOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleSingleSessionAppWithOracleFilterer, error) {
	contract, err := bindSimpleSingleSessionAppWithOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleSingleSessionAppWithOracleFilterer{contract: contract}, nil
}

// bindSimpleSingleSessionAppWithOracle binds a generic wrapper to an already deployed contract.
func bindSimpleSingleSessionAppWithOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SimpleSingleSessionAppWithOracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SimpleSingleSessionAppWithOracle.Contract.SimpleSingleSessionAppWithOracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.SimpleSingleSessionAppWithOracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.SimpleSingleSessionAppWithOracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SimpleSingleSessionAppWithOracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.contract.Transact(opts, method, params...)
}

// GetOutcome is a free data retrieval call binding the contract method 0xea4ba8eb.
//
// Solidity: function getOutcome(bytes _query) constant returns(bool)
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleCaller) GetOutcome(opts *bind.CallOpts, _query []byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _SimpleSingleSessionAppWithOracle.contract.Call(opts, out, "getOutcome", _query)
	return *ret0, err
}

// GetOutcome is a free data retrieval call binding the contract method 0xea4ba8eb.
//
// Solidity: function getOutcome(bytes _query) constant returns(bool)
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleSession) GetOutcome(_query []byte) (bool, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.GetOutcome(&_SimpleSingleSessionAppWithOracle.CallOpts, _query)
}

// GetOutcome is a free data retrieval call binding the contract method 0xea4ba8eb.
//
// Solidity: function getOutcome(bytes _query) constant returns(bool)
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleCallerSession) GetOutcome(_query []byte) (bool, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.GetOutcome(&_SimpleSingleSessionAppWithOracle.CallOpts, _query)
}

// GetState is a free data retrieval call binding the contract method 0x44c9af28.
//
// Solidity: function getState(uint256 _key) constant returns(bytes)
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleCaller) GetState(opts *bind.CallOpts, _key *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _SimpleSingleSessionAppWithOracle.contract.Call(opts, out, "getState", _key)
	return *ret0, err
}

// GetState is a free data retrieval call binding the contract method 0x44c9af28.
//
// Solidity: function getState(uint256 _key) constant returns(bytes)
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleSession) GetState(_key *big.Int) ([]byte, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.GetState(&_SimpleSingleSessionAppWithOracle.CallOpts, _key)
}

// GetState is a free data retrieval call binding the contract method 0x44c9af28.
//
// Solidity: function getState(uint256 _key) constant returns(bytes)
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleCallerSession) GetState(_key *big.Int) ([]byte, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.GetState(&_SimpleSingleSessionAppWithOracle.CallOpts, _key)
}

// GetStatus is a free data retrieval call binding the contract method 0x4e69d560.
//
// Solidity: function getStatus() constant returns(uint8)
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleCaller) GetStatus(opts *bind.CallOpts) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _SimpleSingleSessionAppWithOracle.contract.Call(opts, out, "getStatus")
	return *ret0, err
}

// GetStatus is a free data retrieval call binding the contract method 0x4e69d560.
//
// Solidity: function getStatus() constant returns(uint8)
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleSession) GetStatus() (uint8, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.GetStatus(&_SimpleSingleSessionAppWithOracle.CallOpts)
}

// GetStatus is a free data retrieval call binding the contract method 0x4e69d560.
//
// Solidity: function getStatus() constant returns(uint8)
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleCallerSession) GetStatus() (uint8, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.GetStatus(&_SimpleSingleSessionAppWithOracle.CallOpts)
}

// IsFinalized is a free data retrieval call binding the contract method 0xbcdbda94.
//
// Solidity: function isFinalized(bytes _query) constant returns(bool)
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleCaller) IsFinalized(opts *bind.CallOpts, _query []byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _SimpleSingleSessionAppWithOracle.contract.Call(opts, out, "isFinalized", _query)
	return *ret0, err
}

// IsFinalized is a free data retrieval call binding the contract method 0xbcdbda94.
//
// Solidity: function isFinalized(bytes _query) constant returns(bool)
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleSession) IsFinalized(_query []byte) (bool, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.IsFinalized(&_SimpleSingleSessionAppWithOracle.CallOpts, _query)
}

// IsFinalized is a free data retrieval call binding the contract method 0xbcdbda94.
//
// Solidity: function isFinalized(bytes _query) constant returns(bool)
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleCallerSession) IsFinalized(_query []byte) (bool, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.IsFinalized(&_SimpleSingleSessionAppWithOracle.CallOpts, _query)
}

// SettleByInvalidState is a paid mutator transaction binding the contract method 0xfb3fe806.
//
// Solidity: function settleByInvalidState(bytes _oracleProof, bytes _cosignedStateProof) returns()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleTransactor) SettleByInvalidState(opts *bind.TransactOpts, _oracleProof []byte, _cosignedStateProof []byte) (*types.Transaction, error) {
	return _SimpleSingleSessionAppWithOracle.contract.Transact(opts, "settleByInvalidState", _oracleProof, _cosignedStateProof)
}

// SettleByInvalidState is a paid mutator transaction binding the contract method 0xfb3fe806.
//
// Solidity: function settleByInvalidState(bytes _oracleProof, bytes _cosignedStateProof) returns()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleSession) SettleByInvalidState(_oracleProof []byte, _cosignedStateProof []byte) (*types.Transaction, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.SettleByInvalidState(&_SimpleSingleSessionAppWithOracle.TransactOpts, _oracleProof, _cosignedStateProof)
}

// SettleByInvalidState is a paid mutator transaction binding the contract method 0xfb3fe806.
//
// Solidity: function settleByInvalidState(bytes _oracleProof, bytes _cosignedStateProof) returns()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleTransactorSession) SettleByInvalidState(_oracleProof []byte, _cosignedStateProof []byte) (*types.Transaction, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.SettleByInvalidState(&_SimpleSingleSessionAppWithOracle.TransactOpts, _oracleProof, _cosignedStateProof)
}

// SettleByInvalidTurn is a paid mutator transaction binding the contract method 0xa428cd3b.
//
// Solidity: function settleByInvalidTurn(bytes _oracleProof, bytes _cosignedStateProof) returns()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleTransactor) SettleByInvalidTurn(opts *bind.TransactOpts, _oracleProof []byte, _cosignedStateProof []byte) (*types.Transaction, error) {
	return _SimpleSingleSessionAppWithOracle.contract.Transact(opts, "settleByInvalidTurn", _oracleProof, _cosignedStateProof)
}

// SettleByInvalidTurn is a paid mutator transaction binding the contract method 0xa428cd3b.
//
// Solidity: function settleByInvalidTurn(bytes _oracleProof, bytes _cosignedStateProof) returns()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleSession) SettleByInvalidTurn(_oracleProof []byte, _cosignedStateProof []byte) (*types.Transaction, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.SettleByInvalidTurn(&_SimpleSingleSessionAppWithOracle.TransactOpts, _oracleProof, _cosignedStateProof)
}

// SettleByInvalidTurn is a paid mutator transaction binding the contract method 0xa428cd3b.
//
// Solidity: function settleByInvalidTurn(bytes _oracleProof, bytes _cosignedStateProof) returns()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleTransactorSession) SettleByInvalidTurn(_oracleProof []byte, _cosignedStateProof []byte) (*types.Transaction, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.SettleByInvalidTurn(&_SimpleSingleSessionAppWithOracle.TransactOpts, _oracleProof, _cosignedStateProof)
}

// SettleByMoveTimeout is a paid mutator transaction binding the contract method 0xf26285b2.
//
// Solidity: function settleByMoveTimeout(bytes _oracleProof) returns()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleTransactor) SettleByMoveTimeout(opts *bind.TransactOpts, _oracleProof []byte) (*types.Transaction, error) {
	return _SimpleSingleSessionAppWithOracle.contract.Transact(opts, "settleByMoveTimeout", _oracleProof)
}

// SettleByMoveTimeout is a paid mutator transaction binding the contract method 0xf26285b2.
//
// Solidity: function settleByMoveTimeout(bytes _oracleProof) returns()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleSession) SettleByMoveTimeout(_oracleProof []byte) (*types.Transaction, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.SettleByMoveTimeout(&_SimpleSingleSessionAppWithOracle.TransactOpts, _oracleProof)
}

// SettleByMoveTimeout is a paid mutator transaction binding the contract method 0xf26285b2.
//
// Solidity: function settleByMoveTimeout(bytes _oracleProof) returns()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleTransactorSession) SettleByMoveTimeout(_oracleProof []byte) (*types.Transaction, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.SettleByMoveTimeout(&_SimpleSingleSessionAppWithOracle.TransactOpts, _oracleProof)
}

// SettleBySigTimeout is a paid mutator transaction binding the contract method 0x2141dbda.
//
// Solidity: function settleBySigTimeout(bytes _oracleProof) returns()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleTransactor) SettleBySigTimeout(opts *bind.TransactOpts, _oracleProof []byte) (*types.Transaction, error) {
	return _SimpleSingleSessionAppWithOracle.contract.Transact(opts, "settleBySigTimeout", _oracleProof)
}

// SettleBySigTimeout is a paid mutator transaction binding the contract method 0x2141dbda.
//
// Solidity: function settleBySigTimeout(bytes _oracleProof) returns()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleSession) SettleBySigTimeout(_oracleProof []byte) (*types.Transaction, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.SettleBySigTimeout(&_SimpleSingleSessionAppWithOracle.TransactOpts, _oracleProof)
}

// SettleBySigTimeout is a paid mutator transaction binding the contract method 0x2141dbda.
//
// Solidity: function settleBySigTimeout(bytes _oracleProof) returns()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleTransactorSession) SettleBySigTimeout(_oracleProof []byte) (*types.Transaction, error) {
	return _SimpleSingleSessionAppWithOracle.Contract.SettleBySigTimeout(&_SimpleSingleSessionAppWithOracle.TransactOpts, _oracleProof)
}

// SimpleSingleSessionAppWithOracleInvalidStateDisputeIterator is returned from FilterInvalidStateDispute and is used to iterate over the raw logs and unpacked data for InvalidStateDispute events raised by the SimpleSingleSessionAppWithOracle contract.
type SimpleSingleSessionAppWithOracleInvalidStateDisputeIterator struct {
	Event *SimpleSingleSessionAppWithOracleInvalidStateDispute // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleSingleSessionAppWithOracleInvalidStateDisputeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleSingleSessionAppWithOracleInvalidStateDispute)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleSingleSessionAppWithOracleInvalidStateDispute)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleSingleSessionAppWithOracleInvalidStateDisputeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleSingleSessionAppWithOracleInvalidStateDisputeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleSingleSessionAppWithOracleInvalidStateDispute represents a InvalidStateDispute event raised by the SimpleSingleSessionAppWithOracle contract.
type SimpleSingleSessionAppWithOracleInvalidStateDispute struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterInvalidStateDispute is a free log retrieval operation binding the contract event 0x58857d7e5d46d366a88b9b19c3c4bfb7573323b8e0602e3966d582bac5aa5fca.
//
// Solidity: event InvalidStateDispute()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleFilterer) FilterInvalidStateDispute(opts *bind.FilterOpts) (*SimpleSingleSessionAppWithOracleInvalidStateDisputeIterator, error) {

	logs, sub, err := _SimpleSingleSessionAppWithOracle.contract.FilterLogs(opts, "InvalidStateDispute")
	if err != nil {
		return nil, err
	}
	return &SimpleSingleSessionAppWithOracleInvalidStateDisputeIterator{contract: _SimpleSingleSessionAppWithOracle.contract, event: "InvalidStateDispute", logs: logs, sub: sub}, nil
}

// WatchInvalidStateDispute is a free log subscription operation binding the contract event 0x58857d7e5d46d366a88b9b19c3c4bfb7573323b8e0602e3966d582bac5aa5fca.
//
// Solidity: event InvalidStateDispute()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleFilterer) WatchInvalidStateDispute(opts *bind.WatchOpts, sink chan<- *SimpleSingleSessionAppWithOracleInvalidStateDispute) (event.Subscription, error) {

	logs, sub, err := _SimpleSingleSessionAppWithOracle.contract.WatchLogs(opts, "InvalidStateDispute")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleSingleSessionAppWithOracleInvalidStateDispute)
				if err := _SimpleSingleSessionAppWithOracle.contract.UnpackLog(event, "InvalidStateDispute", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// SimpleSingleSessionAppWithOracleInvalidTurnDisputeIterator is returned from FilterInvalidTurnDispute and is used to iterate over the raw logs and unpacked data for InvalidTurnDispute events raised by the SimpleSingleSessionAppWithOracle contract.
type SimpleSingleSessionAppWithOracleInvalidTurnDisputeIterator struct {
	Event *SimpleSingleSessionAppWithOracleInvalidTurnDispute // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleSingleSessionAppWithOracleInvalidTurnDisputeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleSingleSessionAppWithOracleInvalidTurnDispute)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleSingleSessionAppWithOracleInvalidTurnDispute)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleSingleSessionAppWithOracleInvalidTurnDisputeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleSingleSessionAppWithOracleInvalidTurnDisputeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleSingleSessionAppWithOracleInvalidTurnDispute represents a InvalidTurnDispute event raised by the SimpleSingleSessionAppWithOracle contract.
type SimpleSingleSessionAppWithOracleInvalidTurnDispute struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterInvalidTurnDispute is a free log retrieval operation binding the contract event 0x12583b36c4ceb396f9b64ae9b3055f92e067e9e27f25624468e49465c7d6d258.
//
// Solidity: event InvalidTurnDispute()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleFilterer) FilterInvalidTurnDispute(opts *bind.FilterOpts) (*SimpleSingleSessionAppWithOracleInvalidTurnDisputeIterator, error) {

	logs, sub, err := _SimpleSingleSessionAppWithOracle.contract.FilterLogs(opts, "InvalidTurnDispute")
	if err != nil {
		return nil, err
	}
	return &SimpleSingleSessionAppWithOracleInvalidTurnDisputeIterator{contract: _SimpleSingleSessionAppWithOracle.contract, event: "InvalidTurnDispute", logs: logs, sub: sub}, nil
}

// WatchInvalidTurnDispute is a free log subscription operation binding the contract event 0x12583b36c4ceb396f9b64ae9b3055f92e067e9e27f25624468e49465c7d6d258.
//
// Solidity: event InvalidTurnDispute()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleFilterer) WatchInvalidTurnDispute(opts *bind.WatchOpts, sink chan<- *SimpleSingleSessionAppWithOracleInvalidTurnDispute) (event.Subscription, error) {

	logs, sub, err := _SimpleSingleSessionAppWithOracle.contract.WatchLogs(opts, "InvalidTurnDispute")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleSingleSessionAppWithOracleInvalidTurnDispute)
				if err := _SimpleSingleSessionAppWithOracle.contract.UnpackLog(event, "InvalidTurnDispute", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// SimpleSingleSessionAppWithOracleMoveTimeoutDisputeIterator is returned from FilterMoveTimeoutDispute and is used to iterate over the raw logs and unpacked data for MoveTimeoutDispute events raised by the SimpleSingleSessionAppWithOracle contract.
type SimpleSingleSessionAppWithOracleMoveTimeoutDisputeIterator struct {
	Event *SimpleSingleSessionAppWithOracleMoveTimeoutDispute // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleSingleSessionAppWithOracleMoveTimeoutDisputeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleSingleSessionAppWithOracleMoveTimeoutDispute)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleSingleSessionAppWithOracleMoveTimeoutDispute)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleSingleSessionAppWithOracleMoveTimeoutDisputeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleSingleSessionAppWithOracleMoveTimeoutDisputeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleSingleSessionAppWithOracleMoveTimeoutDispute represents a MoveTimeoutDispute event raised by the SimpleSingleSessionAppWithOracle contract.
type SimpleSingleSessionAppWithOracleMoveTimeoutDispute struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterMoveTimeoutDispute is a free log retrieval operation binding the contract event 0x5ca2c3e34ecb38f5b6e98856236647247d4acb6a797617631c7815dc16ac0c11.
//
// Solidity: event MoveTimeoutDispute()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleFilterer) FilterMoveTimeoutDispute(opts *bind.FilterOpts) (*SimpleSingleSessionAppWithOracleMoveTimeoutDisputeIterator, error) {

	logs, sub, err := _SimpleSingleSessionAppWithOracle.contract.FilterLogs(opts, "MoveTimeoutDispute")
	if err != nil {
		return nil, err
	}
	return &SimpleSingleSessionAppWithOracleMoveTimeoutDisputeIterator{contract: _SimpleSingleSessionAppWithOracle.contract, event: "MoveTimeoutDispute", logs: logs, sub: sub}, nil
}

// WatchMoveTimeoutDispute is a free log subscription operation binding the contract event 0x5ca2c3e34ecb38f5b6e98856236647247d4acb6a797617631c7815dc16ac0c11.
//
// Solidity: event MoveTimeoutDispute()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleFilterer) WatchMoveTimeoutDispute(opts *bind.WatchOpts, sink chan<- *SimpleSingleSessionAppWithOracleMoveTimeoutDispute) (event.Subscription, error) {

	logs, sub, err := _SimpleSingleSessionAppWithOracle.contract.WatchLogs(opts, "MoveTimeoutDispute")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleSingleSessionAppWithOracleMoveTimeoutDispute)
				if err := _SimpleSingleSessionAppWithOracle.contract.UnpackLog(event, "MoveTimeoutDispute", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// SimpleSingleSessionAppWithOracleSigTimeoutDisputeIterator is returned from FilterSigTimeoutDispute and is used to iterate over the raw logs and unpacked data for SigTimeoutDispute events raised by the SimpleSingleSessionAppWithOracle contract.
type SimpleSingleSessionAppWithOracleSigTimeoutDisputeIterator struct {
	Event *SimpleSingleSessionAppWithOracleSigTimeoutDispute // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleSingleSessionAppWithOracleSigTimeoutDisputeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleSingleSessionAppWithOracleSigTimeoutDispute)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleSingleSessionAppWithOracleSigTimeoutDispute)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleSingleSessionAppWithOracleSigTimeoutDisputeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleSingleSessionAppWithOracleSigTimeoutDisputeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleSingleSessionAppWithOracleSigTimeoutDispute represents a SigTimeoutDispute event raised by the SimpleSingleSessionAppWithOracle contract.
type SimpleSingleSessionAppWithOracleSigTimeoutDispute struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterSigTimeoutDispute is a free log retrieval operation binding the contract event 0x4ede5136b5765b273092424d192085d14577fe5c0b0512401b5d3706b46c8e20.
//
// Solidity: event SigTimeoutDispute()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleFilterer) FilterSigTimeoutDispute(opts *bind.FilterOpts) (*SimpleSingleSessionAppWithOracleSigTimeoutDisputeIterator, error) {

	logs, sub, err := _SimpleSingleSessionAppWithOracle.contract.FilterLogs(opts, "SigTimeoutDispute")
	if err != nil {
		return nil, err
	}
	return &SimpleSingleSessionAppWithOracleSigTimeoutDisputeIterator{contract: _SimpleSingleSessionAppWithOracle.contract, event: "SigTimeoutDispute", logs: logs, sub: sub}, nil
}

// WatchSigTimeoutDispute is a free log subscription operation binding the contract event 0x4ede5136b5765b273092424d192085d14577fe5c0b0512401b5d3706b46c8e20.
//
// Solidity: event SigTimeoutDispute()
func (_SimpleSingleSessionAppWithOracle *SimpleSingleSessionAppWithOracleFilterer) WatchSigTimeoutDispute(opts *bind.WatchOpts, sink chan<- *SimpleSingleSessionAppWithOracleSigTimeoutDispute) (event.Subscription, error) {

	logs, sub, err := _SimpleSingleSessionAppWithOracle.contract.WatchLogs(opts, "SigTimeoutDispute")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleSingleSessionAppWithOracleSigTimeoutDispute)
				if err := _SimpleSingleSessionAppWithOracle.contract.UnpackLog(event, "SigTimeoutDispute", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
