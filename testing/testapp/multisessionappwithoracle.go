// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package testapp

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = abi.U256
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// SimpleMultiSessionAppWithOracleABI is the input ABI used to generate the binding from.
const SimpleMultiSessionAppWithOracleABI = "[{\"constant\":false,\"inputs\":[{\"name\":\"_oracleProof\",\"type\":\"bytes\"}],\"name\":\"settleBySigTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_nonce\",\"type\":\"uint256\"},{\"name\":\"_signers\",\"type\":\"address[]\"}],\"name\":\"getSessionID\",\"outputs\":[{\"name\":\"session\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_session\",\"type\":\"bytes32\"}],\"name\":\"getStatus\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracleProof\",\"type\":\"bytes\"},{\"name\":\"_cosignedStateProof\",\"type\":\"bytes\"}],\"name\":\"settleByInvalidTurn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_query\",\"type\":\"bytes\"}],\"name\":\"isFinalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracleProof\",\"type\":\"bytes\"}],\"name\":\"settleByMoveTimeout\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_oracleProof\",\"type\":\"bytes\"},{\"name\":\"_cosignedStateProof\",\"type\":\"bytes\"}],\"name\":\"settleByInvalidState\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_sigTimeout\",\"type\":\"uint256\"},{\"name\":\"_moveTimeout\",\"type\":\"uint256\"},{\"name\":\"_playerNum\",\"type\":\"uint256\"},{\"name\":\"_oracle\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"session\",\"type\":\"bytes32\"}],\"name\":\"SigTimeoutDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"session\",\"type\":\"bytes32\"}],\"name\":\"MoveTimeoutDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"session\",\"type\":\"bytes32\"}],\"name\":\"InvalidTurnDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"session\",\"type\":\"bytes32\"}],\"name\":\"InvalidStateDispute\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[{\"name\":\"_query\",\"type\":\"bytes\"}],\"name\":\"getOutcome\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_session\",\"type\":\"bytes32\"},{\"name\":\"_key\",\"type\":\"uint256\"}],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]"

// SimpleMultiSessionAppWithOracleBin is the compiled bytecode used for deploying new contracts.
const SimpleMultiSessionAppWithOracleBin = `0x608060405234801561001057600080fd5b50604051608080612e288339810180604052608081101561003057600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291905050508383838383838383836000800181905550826000600101819055508160006002018190555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050505050505050612d48806100e06000396000f3fe608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632141dbda1461009e57806329dd2f8e146101245780634d8bedec146101e25780635de28ae0146102c5578063a428cd3b14610322578063bcdbda94146103fd578063ea4ba8eb1461049b578063f26285b214610539578063fb3fe806146105bf575b600080fd5b3480156100aa57600080fd5b50610122600480360360208110156100c157600080fd5b81019080803590602001906401000000008111156100de57600080fd5b8201836020820111156100f057600080fd5b8035906020019184600183028401116401000000008311171561011257600080fd5b909192939192939050505061069a565b005b34801561013057600080fd5b506101676004803603604081101561014757600080fd5b810190808035906020019092919080359060200190929190505050610971565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101a757808201518184015260208101905061018c565b50505050905090810190601f1680156101d45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101ee57600080fd5b506102af6004803603604081101561020557600080fd5b81019080803590602001909291908035906020019064010000000081111561022c57600080fd5b82018360208201111561023e57600080fd5b8035906020019184602083028401116401000000008311171561026057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506109e4565b6040518082815260200191505060405180910390f35b3480156102d157600080fd5b506102fe600480360360208110156102e857600080fd5b8101908080359060200190929190505050610a89565b6040518082600181111561030e57fe5b60ff16815260200191505060405180910390f35b34801561032e57600080fd5b506103fb6004803603604081101561034557600080fd5b810190808035906020019064010000000081111561036257600080fd5b82018360208201111561037457600080fd5b8035906020019184600183028401116401000000008311171561039657600080fd5b9091929391929390803590602001906401000000008111156103b757600080fd5b8201836020820111156103c957600080fd5b803590602001918460018302840111640100000000831117156103eb57600080fd5b9091929391929390505050610ab6565b005b34801561040957600080fd5b506104816004803603602081101561042057600080fd5b810190808035906020019064010000000081111561043d57600080fd5b82018360208201111561044f57600080fd5b8035906020019184600183028401116401000000008311171561047157600080fd5b9091929391929390505050610d91565b604051808215151515815260200191505060405180910390f35b3480156104a757600080fd5b5061051f600480360360208110156104be57600080fd5b81019080803590602001906401000000008111156104db57600080fd5b8201836020820111156104ed57600080fd5b8035906020019184600183028401116401000000008311171561050f57600080fd5b9091929391929390505050610e28565b604051808215151515815260200191505060405180910390f35b34801561054557600080fd5b506105bd6004803603602081101561055c57600080fd5b810190808035906020019064010000000081111561057957600080fd5b82018360208201111561058b57600080fd5b803590602001918460018302840111640100000000831117156105ad57600080fd5b9091929391929390505050610e9c565b005b3480156105cb57600080fd5b50610698600480360360408110156105e257600080fd5b81019080803590602001906401000000008111156105ff57600080fd5b82018360208201111561061157600080fd5b8035906020019184600183028401116401000000008311171561063357600080fd5b90919293919293908035906020019064010000000081111561065457600080fd5b82018360208201111561066657600080fd5b8035906020019184600183028401116401000000008311171561068857600080fd5b90919293919293905050506110de565b005b6106a2612b75565b6106ef83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611355565b90508060600151600080015482604001510110151561079c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001807f6f7261636c65207374617465206d75737420626520616674657220736967206481526020017f6561646c696e650000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6107a4612bbb565b60606107b5836000015160016114e2565b91509150600060020154815110151561085c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b8152602001807f7369676e657273206c656e677468206d75737420626520736d616c6c6572207481526020017f68616e20706c617965727300000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000610870836000015185608001516109e4565b905060018081111561087e57fe5b6004600083815260200190815260200160002060000160009054906101000a900460ff1660018111156108ad57fe5b14151515610923576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f73657373696f6e2073746174652069732066696e616c697a656400000000000081525060200191505060405180910390fd5b61093281846040015184611533565b7f84b2b939adef644951dc4dc6318dc4fbe66768898728a435c356a3296947e510816040518082815260200191505060405180910390a1505050505050565b60608060206040519080825280601f01601f1916602001820160405280156109a85781602001600182028038833980820191505090505b50905060006005600086815260200190815260200160002060000160009054906101000a900460ff169050806020830152819250505092915050565b600082826040516020018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610a34578082015181840152602081019050610a19565b50505050905001935050505060405160208183030381529060405280519060200120905081600460008381526020019081526020016000206001019080519060200190610a82929190612be4565b5092915050565b60006004600083815260200190815260200160002060000160009054906101000a900460ff169050919050565b610abe612b75565b610b0b85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611355565b9050610b15612bbb565b6060610b6685858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505060016114e2565b91509150610b78836080015182611621565b6000610b8783604001516117b3565b9050836020015173ffffffffffffffffffffffffffffffffffffffff1684608001518260ff16815181101515610bb957fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1614151515610c75576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f6f7261636c652073746174652075736572206d75737420626520696e76616c6981526020017f640000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000610c89846000015186608001516109e4565b9050600180811115610c9757fe5b6004600083815260200190815260200160002060000160009054906101000a900460ff166001811115610cc657fe5b14151515610d3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f73657373696f6e2073746174652069732066696e616c697a656400000000000081525060200191505060405180910390fd5b610d4f8185604001518760200151611839565b7f632769e06437be0bc831706f701d0f55babe48cb2f48113134e4103bd5830afd816040518082815260200191505060405180910390a1505050505050505050565b600080610de184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611927565b9050600180811115610def57fe5b6004600083815260200190815260200160002060000160009054906101000a900460ff166001811115610e1e57fe5b1491505092915050565b6000610e32612c6e565b610e7f84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611945565b9050610e93816000015182602001516119f9565b91505092915050565b610ea4612b75565b610ef183838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611355565b90508060600151600060010154826040015101101515610f9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001807f6f7261636c65207374617465206d757374206265206166746572206d6f76652081526020017f646561646c696e6500000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b610fa7612bbb565b6060610fb8836000015160016114e2565b91509150610fca836080015182611621565b6000610fde836000015185608001516109e4565b9050600180811115610fec57fe5b6004600083815260200190815260200160002060000160009054906101000a900460ff16600181111561101b57fe5b14151515611091576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f73657373696f6e2073746174652069732066696e616c697a656400000000000081525060200191505060405180910390fd5b61109f818460400151611b24565b7f36a857ab2f7719bef9c1d8246bf7211e3b4ec09468b88347325456d5bec1ce3a816040518082815260200191505060405180910390a1505050505050565b6110e6612b75565b61113385858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611355565b905061113d612bbb565b61114c826000015160006114e2565b509050611157612bbb565b60606111a886868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505060016114e2565b915091506111ba846080015182611621565b6111c48284611c11565b151515611239576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6f7261636c65206170707374617465206d75737420626520696e76616c69640081525060200191505060405180910390fd5b600061124d836000015186608001516109e4565b905060018081111561125b57fe5b6004600083815260200190815260200160002060000160009054906101000a900460ff16600181111561128a57fe5b14151515611300576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f73657373696f6e2073746174652069732066696e616c697a656400000000000081525060200191505060405180910390fd5b6113138184604001518760200151611c59565b7f1ee6c3823014f5e366ff312d2cf02769f8c7767be5f8c4fc3bcfaa9eb1517d81816040518082815260200191505060405180910390a1505050505050505050565b61135d612b75565b611365612c8b565b61136e83611d47565b905060006113f282600001516040516020018082805190602001908083835b6020831015156113b2578051825260208201915060208101905060208303925061138d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120611df2565b90506000611404828460200151611e4a565b9050600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415156114cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f7369676e6572206d757374206265206f7261636c65000000000000000000000081525060200191505060405180910390fd5b6114d88360000151611f2c565b9350505050919050565b6114ea612bbb565b60606114f4612ca5565b6114fd85612182565b905061150c816000015161230d565b9250831561152b576115288360400151826020015160006123fb565b91505b509250929050565b600060046000858152602001908152602001600020905060018160000160006101000a81548160ff0219169083600181111561156b57fe5b021790555082600181518110151561157f57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090046005600086815260200190815260200160002060000160006101000a81548160ff021916908360ff16021790555050505050565b8151815114151561169a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f696e76616c6964206e756d626572206f66207369676e6572730000000000000081525060200191505060405180910390fd5b60008090505b82518110156117ae5781818151811015156116b757fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1683828151811015156116e557fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16141515156117a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001807f73746174652070726f6f66207369676e6572206d75737420626520636f72726581526020017f637400000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b80806001019150506116a0565b505050565b60008160008151811015156117c457fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090049050919050565b600060046000858152602001908152602001600020905060018160000160006101000a81548160ff0219169083600181111561187157fe5b021790555082600181518110151561188557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090046005600086815260200190815260200160002060000160006101000a81548160ff021916908360ff16021790555050505050565b60006020825114151561193957600080fd5b60208201519050919050565b61194d612c6e565b611955612cbf565b61195e83612626565b90506000805b61196d83612657565b156119f15761197b8361266c565b809250819350505060001561198f576119ec565b60018214156119b7576119a96119a4846126a2565b611927565b8460000181815250506119eb565b60028214156119d6576119c9836126a2565b84602001819052506119ea565b6119e9818461275d90919063ffffffff16565b5b5b5b611964565b505050919050565b600060018251141515611a74576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f696e76616c6964207175657279206c656e67746800000000000000000000000081525060200191505060405180910390fd5b816000815181101515611a8357fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f0100000000000000000000000000000000000000000000000000000000000000900460ff166005600085815260200190815260200160002060000160009054906101000a900460ff1660ff1614905092915050565b600060046000848152602001908152602001600020905060018160000160006101000a81548160ff02191690836001811115611b5c57fe5b0217905550816001815181101515611b7057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090046005600085815260200190815260200160002060000160006101000a81548160ff021916908360ff160217905550505050565b600081602001518360200151101515611c2d5760009050611c53565b611c3f836040015183604001516127ef565b1515611c4e5760009050611c53565b600190505b92915050565b600060046000858152602001908152602001600020905060018160000160006101000a81548160ff02191690836001811115611c9157fe5b0217905550826001815181101515611ca557fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090046005600086815260200190815260200160002060000160006101000a81548160ff021916908360ff16021790555050505050565b611d4f612c8b565b611d57612cbf565b611d6083612626565b90506000805b611d6f83612657565b15611dea57611d7d8361266c565b8092508193505050600015611d9157611de5565b6001821415611db057611da3836126a2565b8460000181905250611de4565b6002821415611dcf57611dc2836126a2565b8460200181905250611de3565b611de2818461275d90919063ffffffff16565b5b5b5b611d66565b505050919050565b60008160405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050919050565b600060418251141515611e605760009050611f26565b60008060006020850151925060408501519150606085015160001a9050601b8160ff161015611e9057601b810190505b601b8160ff1614158015611ea85750601c8160ff1614155b15611eb95760009350505050611f26565b60018682858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611f16573d6000803e3d6000fd5b5050506020604051035193505050505b92915050565b611f34612b75565b611f3c612cbf565b611f4583612626565b90506060611f5d600583612a0490919063ffffffff16565b9050806005815181101515611f6e57fe5b90602001906020020151604051908082528060200260200182016040528015611fa65781602001602082028038833980820191505090505b5083608001819052506000816005815181101515611fc057fe5b90602001906020020181815250506000805b611fdb84612657565b1561217957611fe98461266c565b8092508193505050600015611ffd57612174565b600182141561201c5761200f846126a2565b8560000181905250612173565b600282141561207257612036612031856126a2565b612aad565b856020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050612172565b60038214156120925761208484612abf565b856040018181525050612171565b60048214156120b2576120a484612abf565b856060018181525050612170565b600582141561215b576120cc6120c7856126a2565b612aad565b85608001518460058151811015156120e057fe5b906020019060200201518151811015156120f657fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082600581518110151561214157fe5b90602001906020020180518091906001018152505061216f565b61216e818561275d90919063ffffffff16565b5b5b5b5b5b5b611fd2565b50505050919050565b61218a612ca5565b612192612cbf565b61219b83612626565b905060606121b3600283612a0490919063ffffffff16565b90508060028151811015156121c457fe5b9060200190602002015160405190808252806020026020018201604052801561220157816020015b60608152602001906001900390816121ec5790505b508360200181905250600081600281518110151561221b57fe5b90602001906020020181815250506000805b61223684612657565b15612304576122448461266c565b8092508193505050600015612258576122ff565b60018214156122775761226a846126a2565b85600001819052506122fe565b60028214156122e957612289846126a2565b856020015184600281518110151561229d57fe5b906020019060200201518151811015156122b357fe5b906020019060200201819052508260028151811015156122cf57fe5b9060200190602002018051809190600101815250506122fd565b6122fc818561275d90919063ffffffff16565b5b5b5b61222d565b50505050919050565b612315612bbb565b61231d612cbf565b61232683612626565b90506000805b61233583612657565b156123f3576123438361266c565b8092508193505050600015612357576123ee565b60018214156123775761236983612abf565b8460000181815250506123ed565b60028214156123975761238983612abf565b8460200181815250506123ec565b60038214156123b6576123a9836126a2565b84604001819052506123eb565b60048214156123d6576123c883612abf565b8460600181815250506123ea565b6123e9818461275d90919063ffffffff16565b5b5b5b5b5b61232c565b505050919050565b606080835160405190808252806020026020018201604052801561242e5781602001602082028038833980820191505090505b50905060006124af866040516020018082805190602001908083835b60208310151561246f578051825260208201915060208101905060208303925061244a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405280519060200120611df2565b9050600080905060008090505b8651811015612618576124e68388838151811015156124d757fe5b90602001906020020151611e4a565b84828151811015156124f457fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050851561260b578173ffffffffffffffffffffffffffffffffffffffff16848281518110151561255b57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff161115156125f0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f7369676e657273206e6f7420696e20617363656e64696e67206f72646572000081525060200191505060405180910390fd5b83818151811015156125fe57fe5b9060200190602002015191505b80806001019150506124bc565b508293505050509392505050565b61262e612cbf565b6001825111151561263e57600080fd5b8181602001819052506000816000018181525050919050565b60008160200151518260000151109050919050565b600080600061267a84612abf565b905060088181151561268857fe5b04925060078116600581111561269a57fe5b915050915091565b606060006126af83612abf565b9050600081846000015101905083602001515181111515156126d057600080fd5b816040519080825280601f01601f1916602001820160405280156127035781602001600182028038833980820191505090505b50925060608460200151905060008086600001519050602086019150806020840101905060008090505b8581101561274857808201518184015260208101905061272d565b50838760000181815250505050505050919050565b6000600581111561276a57fe5b81600581111561277657fe5b141561278b5761278582612abf565b506127eb565b6002600581111561279857fe5b8160058111156127a457fe5b14156127e55760006127b583612abf565b9050808360000181815101915081815250508260200151518360000151111515156127df57600080fd5b506127ea565b600080fd5b5b5050565b60006002835114151561286a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f696e76616c696420636f7369676e6564207374617465206c656e67746800000081525060200191505060405180910390fd5b6002825114151561287e57600090506129fe565b6000612889846117b3565b90506000612896846117b3565b90508060ff166000600201546001840160ff168115156128b257fe5b061415156128c5576000925050506129fe565b60008560018151811015156128d657fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090049050600085600181518110151561295757fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004905060018260ff1614806129dc575060028260ff16145b156129f5578060ff168260ff16149450505050506129fe565b60019450505050505b92915050565b606060008360000151905060018301604051908082528060200260200182016040528015612a415781602001602082028038833980820191505090505b5091506000805b612a5186612657565b15612a9a57612a5f8661266c565b809250819350505060018483815181101515612a7757fe5b9060200190602002018181510191508181525050612a95868261275d565b612a48565b8286600001818152505050505092915050565b6000612ab882612b48565b9050919050565b60008060608360200151905083600001519250826020820101519150600080935060008090505b600a811015612b3d5783811a915060078102607f83169060020a02851794506000608083161415612b30576001810186600001818151019150818152505084945050505050612b43565b8080600101915050612ae6565b50600080fd5b919050565b600060148251141515612b5a57600080fd5b6c010000000000000000000000006020830151049050919050565b60a06040519081016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001606081525090565b608060405190810160405280600081526020016000815260200160608152602001600081525090565b828054828255906000526020600020908101928215612c5d579160200282015b82811115612c5c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612c04565b5b509050612c6a9190612cd9565b5090565b604080519081016040528060008019168152602001606081525090565b604080519081016040528060608152602001606081525090565b604080519081016040528060608152602001606081525090565b604080519081016040528060008152602001606081525090565b612d1991905b80821115612d1557600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101612cdf565b5090565b9056fea165627a7a72305820c0d81902c06152cdd7772f8fbebbf4d011e67cb4dbdfdffebfe98f1381cd9b580029`

// DeploySimpleMultiSessionAppWithOracle deploys a new Ethereum contract, binding an instance of SimpleMultiSessionAppWithOracle to it.
func DeploySimpleMultiSessionAppWithOracle(auth *bind.TransactOpts, backend bind.ContractBackend, _sigTimeout *big.Int, _moveTimeout *big.Int, _playerNum *big.Int, _oracle common.Address) (common.Address, *types.Transaction, *SimpleMultiSessionAppWithOracle, error) {
	parsed, err := abi.JSON(strings.NewReader(SimpleMultiSessionAppWithOracleABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SimpleMultiSessionAppWithOracleBin), backend, _sigTimeout, _moveTimeout, _playerNum, _oracle)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SimpleMultiSessionAppWithOracle{SimpleMultiSessionAppWithOracleCaller: SimpleMultiSessionAppWithOracleCaller{contract: contract}, SimpleMultiSessionAppWithOracleTransactor: SimpleMultiSessionAppWithOracleTransactor{contract: contract}, SimpleMultiSessionAppWithOracleFilterer: SimpleMultiSessionAppWithOracleFilterer{contract: contract}}, nil
}

// SimpleMultiSessionAppWithOracle is an auto generated Go binding around an Ethereum contract.
type SimpleMultiSessionAppWithOracle struct {
	SimpleMultiSessionAppWithOracleCaller     // Read-only binding to the contract
	SimpleMultiSessionAppWithOracleTransactor // Write-only binding to the contract
	SimpleMultiSessionAppWithOracleFilterer   // Log filterer for contract events
}

// SimpleMultiSessionAppWithOracleCaller is an auto generated read-only Go binding around an Ethereum contract.
type SimpleMultiSessionAppWithOracleCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleMultiSessionAppWithOracleTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SimpleMultiSessionAppWithOracleTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleMultiSessionAppWithOracleFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SimpleMultiSessionAppWithOracleFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SimpleMultiSessionAppWithOracleSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SimpleMultiSessionAppWithOracleSession struct {
	Contract     *SimpleMultiSessionAppWithOracle // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                    // Call options to use throughout this session
	TransactOpts bind.TransactOpts                // Transaction auth options to use throughout this session
}

// SimpleMultiSessionAppWithOracleCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SimpleMultiSessionAppWithOracleCallerSession struct {
	Contract *SimpleMultiSessionAppWithOracleCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                          // Call options to use throughout this session
}

// SimpleMultiSessionAppWithOracleTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SimpleMultiSessionAppWithOracleTransactorSession struct {
	Contract     *SimpleMultiSessionAppWithOracleTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                          // Transaction auth options to use throughout this session
}

// SimpleMultiSessionAppWithOracleRaw is an auto generated low-level Go binding around an Ethereum contract.
type SimpleMultiSessionAppWithOracleRaw struct {
	Contract *SimpleMultiSessionAppWithOracle // Generic contract binding to access the raw methods on
}

// SimpleMultiSessionAppWithOracleCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SimpleMultiSessionAppWithOracleCallerRaw struct {
	Contract *SimpleMultiSessionAppWithOracleCaller // Generic read-only contract binding to access the raw methods on
}

// SimpleMultiSessionAppWithOracleTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SimpleMultiSessionAppWithOracleTransactorRaw struct {
	Contract *SimpleMultiSessionAppWithOracleTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSimpleMultiSessionAppWithOracle creates a new instance of SimpleMultiSessionAppWithOracle, bound to a specific deployed contract.
func NewSimpleMultiSessionAppWithOracle(address common.Address, backend bind.ContractBackend) (*SimpleMultiSessionAppWithOracle, error) {
	contract, err := bindSimpleMultiSessionAppWithOracle(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SimpleMultiSessionAppWithOracle{SimpleMultiSessionAppWithOracleCaller: SimpleMultiSessionAppWithOracleCaller{contract: contract}, SimpleMultiSessionAppWithOracleTransactor: SimpleMultiSessionAppWithOracleTransactor{contract: contract}, SimpleMultiSessionAppWithOracleFilterer: SimpleMultiSessionAppWithOracleFilterer{contract: contract}}, nil
}

// NewSimpleMultiSessionAppWithOracleCaller creates a new read-only instance of SimpleMultiSessionAppWithOracle, bound to a specific deployed contract.
func NewSimpleMultiSessionAppWithOracleCaller(address common.Address, caller bind.ContractCaller) (*SimpleMultiSessionAppWithOracleCaller, error) {
	contract, err := bindSimpleMultiSessionAppWithOracle(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleMultiSessionAppWithOracleCaller{contract: contract}, nil
}

// NewSimpleMultiSessionAppWithOracleTransactor creates a new write-only instance of SimpleMultiSessionAppWithOracle, bound to a specific deployed contract.
func NewSimpleMultiSessionAppWithOracleTransactor(address common.Address, transactor bind.ContractTransactor) (*SimpleMultiSessionAppWithOracleTransactor, error) {
	contract, err := bindSimpleMultiSessionAppWithOracle(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SimpleMultiSessionAppWithOracleTransactor{contract: contract}, nil
}

// NewSimpleMultiSessionAppWithOracleFilterer creates a new log filterer instance of SimpleMultiSessionAppWithOracle, bound to a specific deployed contract.
func NewSimpleMultiSessionAppWithOracleFilterer(address common.Address, filterer bind.ContractFilterer) (*SimpleMultiSessionAppWithOracleFilterer, error) {
	contract, err := bindSimpleMultiSessionAppWithOracle(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SimpleMultiSessionAppWithOracleFilterer{contract: contract}, nil
}

// bindSimpleMultiSessionAppWithOracle binds a generic wrapper to an already deployed contract.
func bindSimpleMultiSessionAppWithOracle(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SimpleMultiSessionAppWithOracleABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SimpleMultiSessionAppWithOracle.Contract.SimpleMultiSessionAppWithOracleCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.SimpleMultiSessionAppWithOracleTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.SimpleMultiSessionAppWithOracleTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SimpleMultiSessionAppWithOracle.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.contract.Transact(opts, method, params...)
}

// GetOutcome is a free data retrieval call binding the contract method 0xea4ba8eb.
//
// Solidity: function getOutcome(bytes _query) constant returns(bool)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleCaller) GetOutcome(opts *bind.CallOpts, _query []byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _SimpleMultiSessionAppWithOracle.contract.Call(opts, out, "getOutcome", _query)
	return *ret0, err
}

// GetOutcome is a free data retrieval call binding the contract method 0xea4ba8eb.
//
// Solidity: function getOutcome(bytes _query) constant returns(bool)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleSession) GetOutcome(_query []byte) (bool, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.GetOutcome(&_SimpleMultiSessionAppWithOracle.CallOpts, _query)
}

// GetOutcome is a free data retrieval call binding the contract method 0xea4ba8eb.
//
// Solidity: function getOutcome(bytes _query) constant returns(bool)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleCallerSession) GetOutcome(_query []byte) (bool, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.GetOutcome(&_SimpleMultiSessionAppWithOracle.CallOpts, _query)
}

// GetState is a free data retrieval call binding the contract method 0x29dd2f8e.
//
// Solidity: function getState(bytes32 _session, uint256 _key) constant returns(bytes)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleCaller) GetState(opts *bind.CallOpts, _session [32]byte, _key *big.Int) ([]byte, error) {
	var (
		ret0 = new([]byte)
	)
	out := ret0
	err := _SimpleMultiSessionAppWithOracle.contract.Call(opts, out, "getState", _session, _key)
	return *ret0, err
}

// GetState is a free data retrieval call binding the contract method 0x29dd2f8e.
//
// Solidity: function getState(bytes32 _session, uint256 _key) constant returns(bytes)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleSession) GetState(_session [32]byte, _key *big.Int) ([]byte, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.GetState(&_SimpleMultiSessionAppWithOracle.CallOpts, _session, _key)
}

// GetState is a free data retrieval call binding the contract method 0x29dd2f8e.
//
// Solidity: function getState(bytes32 _session, uint256 _key) constant returns(bytes)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleCallerSession) GetState(_session [32]byte, _key *big.Int) ([]byte, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.GetState(&_SimpleMultiSessionAppWithOracle.CallOpts, _session, _key)
}

// GetStatus is a free data retrieval call binding the contract method 0x5de28ae0.
//
// Solidity: function getStatus(bytes32 _session) constant returns(uint8)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleCaller) GetStatus(opts *bind.CallOpts, _session [32]byte) (uint8, error) {
	var (
		ret0 = new(uint8)
	)
	out := ret0
	err := _SimpleMultiSessionAppWithOracle.contract.Call(opts, out, "getStatus", _session)
	return *ret0, err
}

// GetStatus is a free data retrieval call binding the contract method 0x5de28ae0.
//
// Solidity: function getStatus(bytes32 _session) constant returns(uint8)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleSession) GetStatus(_session [32]byte) (uint8, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.GetStatus(&_SimpleMultiSessionAppWithOracle.CallOpts, _session)
}

// GetStatus is a free data retrieval call binding the contract method 0x5de28ae0.
//
// Solidity: function getStatus(bytes32 _session) constant returns(uint8)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleCallerSession) GetStatus(_session [32]byte) (uint8, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.GetStatus(&_SimpleMultiSessionAppWithOracle.CallOpts, _session)
}

// IsFinalized is a free data retrieval call binding the contract method 0xbcdbda94.
//
// Solidity: function isFinalized(bytes _query) constant returns(bool)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleCaller) IsFinalized(opts *bind.CallOpts, _query []byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _SimpleMultiSessionAppWithOracle.contract.Call(opts, out, "isFinalized", _query)
	return *ret0, err
}

// IsFinalized is a free data retrieval call binding the contract method 0xbcdbda94.
//
// Solidity: function isFinalized(bytes _query) constant returns(bool)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleSession) IsFinalized(_query []byte) (bool, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.IsFinalized(&_SimpleMultiSessionAppWithOracle.CallOpts, _query)
}

// IsFinalized is a free data retrieval call binding the contract method 0xbcdbda94.
//
// Solidity: function isFinalized(bytes _query) constant returns(bool)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleCallerSession) IsFinalized(_query []byte) (bool, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.IsFinalized(&_SimpleMultiSessionAppWithOracle.CallOpts, _query)
}

// GetSessionID is a paid mutator transaction binding the contract method 0x4d8bedec.
//
// Solidity: function getSessionID(uint256 _nonce, address[] _signers) returns(bytes32 session)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleTransactor) GetSessionID(opts *bind.TransactOpts, _nonce *big.Int, _signers []common.Address) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.contract.Transact(opts, "getSessionID", _nonce, _signers)
}

// GetSessionID is a paid mutator transaction binding the contract method 0x4d8bedec.
//
// Solidity: function getSessionID(uint256 _nonce, address[] _signers) returns(bytes32 session)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleSession) GetSessionID(_nonce *big.Int, _signers []common.Address) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.GetSessionID(&_SimpleMultiSessionAppWithOracle.TransactOpts, _nonce, _signers)
}

// GetSessionID is a paid mutator transaction binding the contract method 0x4d8bedec.
//
// Solidity: function getSessionID(uint256 _nonce, address[] _signers) returns(bytes32 session)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleTransactorSession) GetSessionID(_nonce *big.Int, _signers []common.Address) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.GetSessionID(&_SimpleMultiSessionAppWithOracle.TransactOpts, _nonce, _signers)
}

// SettleByInvalidState is a paid mutator transaction binding the contract method 0xfb3fe806.
//
// Solidity: function settleByInvalidState(bytes _oracleProof, bytes _cosignedStateProof) returns()
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleTransactor) SettleByInvalidState(opts *bind.TransactOpts, _oracleProof []byte, _cosignedStateProof []byte) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.contract.Transact(opts, "settleByInvalidState", _oracleProof, _cosignedStateProof)
}

// SettleByInvalidState is a paid mutator transaction binding the contract method 0xfb3fe806.
//
// Solidity: function settleByInvalidState(bytes _oracleProof, bytes _cosignedStateProof) returns()
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleSession) SettleByInvalidState(_oracleProof []byte, _cosignedStateProof []byte) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.SettleByInvalidState(&_SimpleMultiSessionAppWithOracle.TransactOpts, _oracleProof, _cosignedStateProof)
}

// SettleByInvalidState is a paid mutator transaction binding the contract method 0xfb3fe806.
//
// Solidity: function settleByInvalidState(bytes _oracleProof, bytes _cosignedStateProof) returns()
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleTransactorSession) SettleByInvalidState(_oracleProof []byte, _cosignedStateProof []byte) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.SettleByInvalidState(&_SimpleMultiSessionAppWithOracle.TransactOpts, _oracleProof, _cosignedStateProof)
}

// SettleByInvalidTurn is a paid mutator transaction binding the contract method 0xa428cd3b.
//
// Solidity: function settleByInvalidTurn(bytes _oracleProof, bytes _cosignedStateProof) returns()
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleTransactor) SettleByInvalidTurn(opts *bind.TransactOpts, _oracleProof []byte, _cosignedStateProof []byte) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.contract.Transact(opts, "settleByInvalidTurn", _oracleProof, _cosignedStateProof)
}

// SettleByInvalidTurn is a paid mutator transaction binding the contract method 0xa428cd3b.
//
// Solidity: function settleByInvalidTurn(bytes _oracleProof, bytes _cosignedStateProof) returns()
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleSession) SettleByInvalidTurn(_oracleProof []byte, _cosignedStateProof []byte) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.SettleByInvalidTurn(&_SimpleMultiSessionAppWithOracle.TransactOpts, _oracleProof, _cosignedStateProof)
}

// SettleByInvalidTurn is a paid mutator transaction binding the contract method 0xa428cd3b.
//
// Solidity: function settleByInvalidTurn(bytes _oracleProof, bytes _cosignedStateProof) returns()
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleTransactorSession) SettleByInvalidTurn(_oracleProof []byte, _cosignedStateProof []byte) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.SettleByInvalidTurn(&_SimpleMultiSessionAppWithOracle.TransactOpts, _oracleProof, _cosignedStateProof)
}

// SettleByMoveTimeout is a paid mutator transaction binding the contract method 0xf26285b2.
//
// Solidity: function settleByMoveTimeout(bytes _oracleProof) returns()
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleTransactor) SettleByMoveTimeout(opts *bind.TransactOpts, _oracleProof []byte) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.contract.Transact(opts, "settleByMoveTimeout", _oracleProof)
}

// SettleByMoveTimeout is a paid mutator transaction binding the contract method 0xf26285b2.
//
// Solidity: function settleByMoveTimeout(bytes _oracleProof) returns()
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleSession) SettleByMoveTimeout(_oracleProof []byte) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.SettleByMoveTimeout(&_SimpleMultiSessionAppWithOracle.TransactOpts, _oracleProof)
}

// SettleByMoveTimeout is a paid mutator transaction binding the contract method 0xf26285b2.
//
// Solidity: function settleByMoveTimeout(bytes _oracleProof) returns()
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleTransactorSession) SettleByMoveTimeout(_oracleProof []byte) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.SettleByMoveTimeout(&_SimpleMultiSessionAppWithOracle.TransactOpts, _oracleProof)
}

// SettleBySigTimeout is a paid mutator transaction binding the contract method 0x2141dbda.
//
// Solidity: function settleBySigTimeout(bytes _oracleProof) returns()
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleTransactor) SettleBySigTimeout(opts *bind.TransactOpts, _oracleProof []byte) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.contract.Transact(opts, "settleBySigTimeout", _oracleProof)
}

// SettleBySigTimeout is a paid mutator transaction binding the contract method 0x2141dbda.
//
// Solidity: function settleBySigTimeout(bytes _oracleProof) returns()
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleSession) SettleBySigTimeout(_oracleProof []byte) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.SettleBySigTimeout(&_SimpleMultiSessionAppWithOracle.TransactOpts, _oracleProof)
}

// SettleBySigTimeout is a paid mutator transaction binding the contract method 0x2141dbda.
//
// Solidity: function settleBySigTimeout(bytes _oracleProof) returns()
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleTransactorSession) SettleBySigTimeout(_oracleProof []byte) (*types.Transaction, error) {
	return _SimpleMultiSessionAppWithOracle.Contract.SettleBySigTimeout(&_SimpleMultiSessionAppWithOracle.TransactOpts, _oracleProof)
}

// SimpleMultiSessionAppWithOracleInvalidStateDisputeIterator is returned from FilterInvalidStateDispute and is used to iterate over the raw logs and unpacked data for InvalidStateDispute events raised by the SimpleMultiSessionAppWithOracle contract.
type SimpleMultiSessionAppWithOracleInvalidStateDisputeIterator struct {
	Event *SimpleMultiSessionAppWithOracleInvalidStateDispute // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleMultiSessionAppWithOracleInvalidStateDisputeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleMultiSessionAppWithOracleInvalidStateDispute)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleMultiSessionAppWithOracleInvalidStateDispute)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleMultiSessionAppWithOracleInvalidStateDisputeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleMultiSessionAppWithOracleInvalidStateDisputeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleMultiSessionAppWithOracleInvalidStateDispute represents a InvalidStateDispute event raised by the SimpleMultiSessionAppWithOracle contract.
type SimpleMultiSessionAppWithOracleInvalidStateDispute struct {
	Session [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInvalidStateDispute is a free log retrieval operation binding the contract event 0x1ee6c3823014f5e366ff312d2cf02769f8c7767be5f8c4fc3bcfaa9eb1517d81.
//
// Solidity: event InvalidStateDispute(bytes32 session)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleFilterer) FilterInvalidStateDispute(opts *bind.FilterOpts) (*SimpleMultiSessionAppWithOracleInvalidStateDisputeIterator, error) {

	logs, sub, err := _SimpleMultiSessionAppWithOracle.contract.FilterLogs(opts, "InvalidStateDispute")
	if err != nil {
		return nil, err
	}
	return &SimpleMultiSessionAppWithOracleInvalidStateDisputeIterator{contract: _SimpleMultiSessionAppWithOracle.contract, event: "InvalidStateDispute", logs: logs, sub: sub}, nil
}

// WatchInvalidStateDispute is a free log subscription operation binding the contract event 0x1ee6c3823014f5e366ff312d2cf02769f8c7767be5f8c4fc3bcfaa9eb1517d81.
//
// Solidity: event InvalidStateDispute(bytes32 session)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleFilterer) WatchInvalidStateDispute(opts *bind.WatchOpts, sink chan<- *SimpleMultiSessionAppWithOracleInvalidStateDispute) (event.Subscription, error) {

	logs, sub, err := _SimpleMultiSessionAppWithOracle.contract.WatchLogs(opts, "InvalidStateDispute")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleMultiSessionAppWithOracleInvalidStateDispute)
				if err := _SimpleMultiSessionAppWithOracle.contract.UnpackLog(event, "InvalidStateDispute", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// SimpleMultiSessionAppWithOracleInvalidTurnDisputeIterator is returned from FilterInvalidTurnDispute and is used to iterate over the raw logs and unpacked data for InvalidTurnDispute events raised by the SimpleMultiSessionAppWithOracle contract.
type SimpleMultiSessionAppWithOracleInvalidTurnDisputeIterator struct {
	Event *SimpleMultiSessionAppWithOracleInvalidTurnDispute // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleMultiSessionAppWithOracleInvalidTurnDisputeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleMultiSessionAppWithOracleInvalidTurnDispute)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleMultiSessionAppWithOracleInvalidTurnDispute)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleMultiSessionAppWithOracleInvalidTurnDisputeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleMultiSessionAppWithOracleInvalidTurnDisputeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleMultiSessionAppWithOracleInvalidTurnDispute represents a InvalidTurnDispute event raised by the SimpleMultiSessionAppWithOracle contract.
type SimpleMultiSessionAppWithOracleInvalidTurnDispute struct {
	Session [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInvalidTurnDispute is a free log retrieval operation binding the contract event 0x632769e06437be0bc831706f701d0f55babe48cb2f48113134e4103bd5830afd.
//
// Solidity: event InvalidTurnDispute(bytes32 session)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleFilterer) FilterInvalidTurnDispute(opts *bind.FilterOpts) (*SimpleMultiSessionAppWithOracleInvalidTurnDisputeIterator, error) {

	logs, sub, err := _SimpleMultiSessionAppWithOracle.contract.FilterLogs(opts, "InvalidTurnDispute")
	if err != nil {
		return nil, err
	}
	return &SimpleMultiSessionAppWithOracleInvalidTurnDisputeIterator{contract: _SimpleMultiSessionAppWithOracle.contract, event: "InvalidTurnDispute", logs: logs, sub: sub}, nil
}

// WatchInvalidTurnDispute is a free log subscription operation binding the contract event 0x632769e06437be0bc831706f701d0f55babe48cb2f48113134e4103bd5830afd.
//
// Solidity: event InvalidTurnDispute(bytes32 session)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleFilterer) WatchInvalidTurnDispute(opts *bind.WatchOpts, sink chan<- *SimpleMultiSessionAppWithOracleInvalidTurnDispute) (event.Subscription, error) {

	logs, sub, err := _SimpleMultiSessionAppWithOracle.contract.WatchLogs(opts, "InvalidTurnDispute")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleMultiSessionAppWithOracleInvalidTurnDispute)
				if err := _SimpleMultiSessionAppWithOracle.contract.UnpackLog(event, "InvalidTurnDispute", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// SimpleMultiSessionAppWithOracleMoveTimeoutDisputeIterator is returned from FilterMoveTimeoutDispute and is used to iterate over the raw logs and unpacked data for MoveTimeoutDispute events raised by the SimpleMultiSessionAppWithOracle contract.
type SimpleMultiSessionAppWithOracleMoveTimeoutDisputeIterator struct {
	Event *SimpleMultiSessionAppWithOracleMoveTimeoutDispute // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleMultiSessionAppWithOracleMoveTimeoutDisputeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleMultiSessionAppWithOracleMoveTimeoutDispute)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleMultiSessionAppWithOracleMoveTimeoutDispute)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleMultiSessionAppWithOracleMoveTimeoutDisputeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleMultiSessionAppWithOracleMoveTimeoutDisputeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleMultiSessionAppWithOracleMoveTimeoutDispute represents a MoveTimeoutDispute event raised by the SimpleMultiSessionAppWithOracle contract.
type SimpleMultiSessionAppWithOracleMoveTimeoutDispute struct {
	Session [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMoveTimeoutDispute is a free log retrieval operation binding the contract event 0x36a857ab2f7719bef9c1d8246bf7211e3b4ec09468b88347325456d5bec1ce3a.
//
// Solidity: event MoveTimeoutDispute(bytes32 session)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleFilterer) FilterMoveTimeoutDispute(opts *bind.FilterOpts) (*SimpleMultiSessionAppWithOracleMoveTimeoutDisputeIterator, error) {

	logs, sub, err := _SimpleMultiSessionAppWithOracle.contract.FilterLogs(opts, "MoveTimeoutDispute")
	if err != nil {
		return nil, err
	}
	return &SimpleMultiSessionAppWithOracleMoveTimeoutDisputeIterator{contract: _SimpleMultiSessionAppWithOracle.contract, event: "MoveTimeoutDispute", logs: logs, sub: sub}, nil
}

// WatchMoveTimeoutDispute is a free log subscription operation binding the contract event 0x36a857ab2f7719bef9c1d8246bf7211e3b4ec09468b88347325456d5bec1ce3a.
//
// Solidity: event MoveTimeoutDispute(bytes32 session)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleFilterer) WatchMoveTimeoutDispute(opts *bind.WatchOpts, sink chan<- *SimpleMultiSessionAppWithOracleMoveTimeoutDispute) (event.Subscription, error) {

	logs, sub, err := _SimpleMultiSessionAppWithOracle.contract.WatchLogs(opts, "MoveTimeoutDispute")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleMultiSessionAppWithOracleMoveTimeoutDispute)
				if err := _SimpleMultiSessionAppWithOracle.contract.UnpackLog(event, "MoveTimeoutDispute", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// SimpleMultiSessionAppWithOracleSigTimeoutDisputeIterator is returned from FilterSigTimeoutDispute and is used to iterate over the raw logs and unpacked data for SigTimeoutDispute events raised by the SimpleMultiSessionAppWithOracle contract.
type SimpleMultiSessionAppWithOracleSigTimeoutDisputeIterator struct {
	Event *SimpleMultiSessionAppWithOracleSigTimeoutDispute // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *SimpleMultiSessionAppWithOracleSigTimeoutDisputeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(SimpleMultiSessionAppWithOracleSigTimeoutDispute)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(SimpleMultiSessionAppWithOracleSigTimeoutDispute)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *SimpleMultiSessionAppWithOracleSigTimeoutDisputeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *SimpleMultiSessionAppWithOracleSigTimeoutDisputeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// SimpleMultiSessionAppWithOracleSigTimeoutDispute represents a SigTimeoutDispute event raised by the SimpleMultiSessionAppWithOracle contract.
type SimpleMultiSessionAppWithOracleSigTimeoutDispute struct {
	Session [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSigTimeoutDispute is a free log retrieval operation binding the contract event 0x84b2b939adef644951dc4dc6318dc4fbe66768898728a435c356a3296947e510.
//
// Solidity: event SigTimeoutDispute(bytes32 session)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleFilterer) FilterSigTimeoutDispute(opts *bind.FilterOpts) (*SimpleMultiSessionAppWithOracleSigTimeoutDisputeIterator, error) {

	logs, sub, err := _SimpleMultiSessionAppWithOracle.contract.FilterLogs(opts, "SigTimeoutDispute")
	if err != nil {
		return nil, err
	}
	return &SimpleMultiSessionAppWithOracleSigTimeoutDisputeIterator{contract: _SimpleMultiSessionAppWithOracle.contract, event: "SigTimeoutDispute", logs: logs, sub: sub}, nil
}

// WatchSigTimeoutDispute is a free log subscription operation binding the contract event 0x84b2b939adef644951dc4dc6318dc4fbe66768898728a435c356a3296947e510.
//
// Solidity: event SigTimeoutDispute(bytes32 session)
func (_SimpleMultiSessionAppWithOracle *SimpleMultiSessionAppWithOracleFilterer) WatchSigTimeoutDispute(opts *bind.WatchOpts, sink chan<- *SimpleMultiSessionAppWithOracleSigTimeoutDispute) (event.Subscription, error) {

	logs, sub, err := _SimpleMultiSessionAppWithOracle.contract.WatchLogs(opts, "SigTimeoutDispute")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(SimpleMultiSessionAppWithOracleSigTimeoutDispute)
				if err := _SimpleMultiSessionAppWithOracle.contract.UnpackLog(event, "SigTimeoutDispute", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}
