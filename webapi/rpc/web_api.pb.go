// Code generated by protoc-gen-go. DO NOT EDIT.
// source: web_api.proto

package rpc

import (
	context "context"
	fmt "fmt"
	entity "github.com/celer-network/goCeler/entity"
	rpc "github.com/celer-network/goCeler/rpc"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Next tag: 3
type GetPayHistoryRequest struct {
	FromStart            bool     `protobuf:"varint,1,opt,name=from_start,json=fromStart,proto3" json:"from_start,omitempty"`
	ItemsPerPage         int32    `protobuf:"varint,2,opt,name=itemsPerPage,proto3" json:"itemsPerPage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPayHistoryRequest) Reset()         { *m = GetPayHistoryRequest{} }
func (m *GetPayHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*GetPayHistoryRequest) ProtoMessage()    {}
func (*GetPayHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{0}
}

func (m *GetPayHistoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPayHistoryRequest.Unmarshal(m, b)
}
func (m *GetPayHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPayHistoryRequest.Marshal(b, m, deterministic)
}
func (m *GetPayHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPayHistoryRequest.Merge(m, src)
}
func (m *GetPayHistoryRequest) XXX_Size() int {
	return xxx_messageInfo_GetPayHistoryRequest.Size(m)
}
func (m *GetPayHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPayHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPayHistoryRequest proto.InternalMessageInfo

func (m *GetPayHistoryRequest) GetFromStart() bool {
	if m != nil {
		return m.FromStart
	}
	return false
}

func (m *GetPayHistoryRequest) GetItemsPerPage() int32 {
	if m != nil {
		return m.ItemsPerPage
	}
	return 0
}

// Next tag: 3
type GetPayHistoryResponse struct {
	Pays                 []*rpc.OneHistoricalPay `protobuf:"bytes,1,rep,name=pays,proto3" json:"pays,omitempty"`
	HasMoreResult        bool                    `protobuf:"varint,2,opt,name=has_more_result,json=hasMoreResult,proto3" json:"has_more_result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *GetPayHistoryResponse) Reset()         { *m = GetPayHistoryResponse{} }
func (m *GetPayHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*GetPayHistoryResponse) ProtoMessage()    {}
func (*GetPayHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{1}
}

func (m *GetPayHistoryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPayHistoryResponse.Unmarshal(m, b)
}
func (m *GetPayHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPayHistoryResponse.Marshal(b, m, deterministic)
}
func (m *GetPayHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPayHistoryResponse.Merge(m, src)
}
func (m *GetPayHistoryResponse) XXX_Size() int {
	return xxx_messageInfo_GetPayHistoryResponse.Size(m)
}
func (m *GetPayHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPayHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPayHistoryResponse proto.InternalMessageInfo

func (m *GetPayHistoryResponse) GetPays() []*rpc.OneHistoricalPay {
	if m != nil {
		return m.Pays
	}
	return nil
}

func (m *GetPayHistoryResponse) GetHasMoreResult() bool {
	if m != nil {
		return m.HasMoreResult
	}
	return false
}

type TokenInfo struct {
	TokenType            entity.TokenType `protobuf:"varint,1,opt,name=token_type,json=tokenType,proto3,enum=entity.TokenType" json:"token_type,omitempty"`
	TokenAddress         string           `protobuf:"bytes,2,opt,name=token_address,json=tokenAddress,proto3" json:"token_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TokenInfo) Reset()         { *m = TokenInfo{} }
func (m *TokenInfo) String() string { return proto.CompactTextString(m) }
func (*TokenInfo) ProtoMessage()    {}
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{2}
}

func (m *TokenInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenInfo.Unmarshal(m, b)
}
func (m *TokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenInfo.Marshal(b, m, deterministic)
}
func (m *TokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenInfo.Merge(m, src)
}
func (m *TokenInfo) XXX_Size() int {
	return xxx_messageInfo_TokenInfo.Size(m)
}
func (m *TokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TokenInfo proto.InternalMessageInfo

func (m *TokenInfo) GetTokenType() entity.TokenType {
	if m != nil {
		return m.TokenType
	}
	return entity.TokenType_INVALID
}

func (m *TokenInfo) GetTokenAddress() string {
	if m != nil {
		return m.TokenAddress
	}
	return ""
}

type SetDelegationRequest struct {
	TokenInfos           []*TokenInfo `protobuf:"bytes,1,rep,name=token_infos,json=tokenInfos,proto3" json:"token_infos,omitempty"`
	BlockDuration        int64        `protobuf:"varint,2,opt,name=block_duration,json=blockDuration,proto3" json:"block_duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SetDelegationRequest) Reset()         { *m = SetDelegationRequest{} }
func (m *SetDelegationRequest) String() string { return proto.CompactTextString(m) }
func (*SetDelegationRequest) ProtoMessage()    {}
func (*SetDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{3}
}

func (m *SetDelegationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetDelegationRequest.Unmarshal(m, b)
}
func (m *SetDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetDelegationRequest.Marshal(b, m, deterministic)
}
func (m *SetDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDelegationRequest.Merge(m, src)
}
func (m *SetDelegationRequest) XXX_Size() int {
	return xxx_messageInfo_SetDelegationRequest.Size(m)
}
func (m *SetDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetDelegationRequest proto.InternalMessageInfo

func (m *SetDelegationRequest) GetTokenInfos() []*TokenInfo {
	if m != nil {
		return m.TokenInfos
	}
	return nil
}

func (m *SetDelegationRequest) GetBlockDuration() int64 {
	if m != nil {
		return m.BlockDuration
	}
	return 0
}

type OpenPaymentChannelRequest struct {
	TokenInfo            *TokenInfo `protobuf:"bytes,1,opt,name=token_info,json=tokenInfo,proto3" json:"token_info,omitempty"`
	Amount               string     `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	PeerAmount           string     `protobuf:"bytes,3,opt,name=peer_amount,json=peerAmount,proto3" json:"peer_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *OpenPaymentChannelRequest) Reset()         { *m = OpenPaymentChannelRequest{} }
func (m *OpenPaymentChannelRequest) String() string { return proto.CompactTextString(m) }
func (*OpenPaymentChannelRequest) ProtoMessage()    {}
func (*OpenPaymentChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{4}
}

func (m *OpenPaymentChannelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenPaymentChannelRequest.Unmarshal(m, b)
}
func (m *OpenPaymentChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenPaymentChannelRequest.Marshal(b, m, deterministic)
}
func (m *OpenPaymentChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenPaymentChannelRequest.Merge(m, src)
}
func (m *OpenPaymentChannelRequest) XXX_Size() int {
	return xxx_messageInfo_OpenPaymentChannelRequest.Size(m)
}
func (m *OpenPaymentChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenPaymentChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpenPaymentChannelRequest proto.InternalMessageInfo

func (m *OpenPaymentChannelRequest) GetTokenInfo() *TokenInfo {
	if m != nil {
		return m.TokenInfo
	}
	return nil
}

func (m *OpenPaymentChannelRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *OpenPaymentChannelRequest) GetPeerAmount() string {
	if m != nil {
		return m.PeerAmount
	}
	return ""
}

type ChannelID struct {
	ChannelId            string   `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChannelID) Reset()         { *m = ChannelID{} }
func (m *ChannelID) String() string { return proto.CompactTextString(m) }
func (*ChannelID) ProtoMessage()    {}
func (*ChannelID) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{5}
}

func (m *ChannelID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChannelID.Unmarshal(m, b)
}
func (m *ChannelID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChannelID.Marshal(b, m, deterministic)
}
func (m *ChannelID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelID.Merge(m, src)
}
func (m *ChannelID) XXX_Size() int {
	return xxx_messageInfo_ChannelID.Size(m)
}
func (m *ChannelID) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelID.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelID proto.InternalMessageInfo

func (m *ChannelID) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type DepositOrWithdrawRequest struct {
	TokenInfo            *TokenInfo `protobuf:"bytes,1,opt,name=token_info,json=tokenInfo,proto3" json:"token_info,omitempty"`
	Amount               string     `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *DepositOrWithdrawRequest) Reset()         { *m = DepositOrWithdrawRequest{} }
func (m *DepositOrWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*DepositOrWithdrawRequest) ProtoMessage()    {}
func (*DepositOrWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{6}
}

func (m *DepositOrWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepositOrWithdrawRequest.Unmarshal(m, b)
}
func (m *DepositOrWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepositOrWithdrawRequest.Marshal(b, m, deterministic)
}
func (m *DepositOrWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositOrWithdrawRequest.Merge(m, src)
}
func (m *DepositOrWithdrawRequest) XXX_Size() int {
	return xxx_messageInfo_DepositOrWithdrawRequest.Size(m)
}
func (m *DepositOrWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositOrWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepositOrWithdrawRequest proto.InternalMessageInfo

func (m *DepositOrWithdrawRequest) GetTokenInfo() *TokenInfo {
	if m != nil {
		return m.TokenInfo
	}
	return nil
}

func (m *DepositOrWithdrawRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type DepositOrWithdrawJob struct {
	JobId                string   `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	TxHash               string   `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepositOrWithdrawJob) Reset()         { *m = DepositOrWithdrawJob{} }
func (m *DepositOrWithdrawJob) String() string { return proto.CompactTextString(m) }
func (*DepositOrWithdrawJob) ProtoMessage()    {}
func (*DepositOrWithdrawJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{7}
}

func (m *DepositOrWithdrawJob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepositOrWithdrawJob.Unmarshal(m, b)
}
func (m *DepositOrWithdrawJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepositOrWithdrawJob.Marshal(b, m, deterministic)
}
func (m *DepositOrWithdrawJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositOrWithdrawJob.Merge(m, src)
}
func (m *DepositOrWithdrawJob) XXX_Size() int {
	return xxx_messageInfo_DepositOrWithdrawJob.Size(m)
}
func (m *DepositOrWithdrawJob) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositOrWithdrawJob.DiscardUnknown(m)
}

var xxx_messageInfo_DepositOrWithdrawJob proto.InternalMessageInfo

func (m *DepositOrWithdrawJob) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *DepositOrWithdrawJob) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type GetBalanceResponse struct {
	FreeBalance          string   `protobuf:"bytes,1,opt,name=free_balance,json=freeBalance,proto3" json:"free_balance,omitempty"`
	LockedBalance        string   `protobuf:"bytes,2,opt,name=locked_balance,json=lockedBalance,proto3" json:"locked_balance,omitempty"`
	ReceivingCapacity    string   `protobuf:"bytes,3,opt,name=receiving_capacity,json=receivingCapacity,proto3" json:"receiving_capacity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBalanceResponse) Reset()         { *m = GetBalanceResponse{} }
func (m *GetBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*GetBalanceResponse) ProtoMessage()    {}
func (*GetBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{8}
}

func (m *GetBalanceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBalanceResponse.Unmarshal(m, b)
}
func (m *GetBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBalanceResponse.Marshal(b, m, deterministic)
}
func (m *GetBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBalanceResponse.Merge(m, src)
}
func (m *GetBalanceResponse) XXX_Size() int {
	return xxx_messageInfo_GetBalanceResponse.Size(m)
}
func (m *GetBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBalanceResponse proto.InternalMessageInfo

func (m *GetBalanceResponse) GetFreeBalance() string {
	if m != nil {
		return m.FreeBalance
	}
	return ""
}

func (m *GetBalanceResponse) GetLockedBalance() string {
	if m != nil {
		return m.LockedBalance
	}
	return ""
}

func (m *GetBalanceResponse) GetReceivingCapacity() string {
	if m != nil {
		return m.ReceivingCapacity
	}
	return ""
}

type GetPeerFreeBalanceRequest struct {
	TokenInfo            *TokenInfo `protobuf:"bytes,1,opt,name=token_info,json=tokenInfo,proto3" json:"token_info,omitempty"`
	PeerAddress          string     `protobuf:"bytes,2,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetPeerFreeBalanceRequest) Reset()         { *m = GetPeerFreeBalanceRequest{} }
func (m *GetPeerFreeBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*GetPeerFreeBalanceRequest) ProtoMessage()    {}
func (*GetPeerFreeBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{9}
}

func (m *GetPeerFreeBalanceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPeerFreeBalanceRequest.Unmarshal(m, b)
}
func (m *GetPeerFreeBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPeerFreeBalanceRequest.Marshal(b, m, deterministic)
}
func (m *GetPeerFreeBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPeerFreeBalanceRequest.Merge(m, src)
}
func (m *GetPeerFreeBalanceRequest) XXX_Size() int {
	return xxx_messageInfo_GetPeerFreeBalanceRequest.Size(m)
}
func (m *GetPeerFreeBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPeerFreeBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPeerFreeBalanceRequest proto.InternalMessageInfo

func (m *GetPeerFreeBalanceRequest) GetTokenInfo() *TokenInfo {
	if m != nil {
		return m.TokenInfo
	}
	return nil
}

func (m *GetPeerFreeBalanceRequest) GetPeerAddress() string {
	if m != nil {
		return m.PeerAddress
	}
	return ""
}

type FreeBalance struct {
	FreeBalance          string   `protobuf:"bytes,1,opt,name=free_balance,json=freeBalance,proto3" json:"free_balance,omitempty"`
	JoinStatus           int32    `protobuf:"varint,2,opt,name=join_status,json=joinStatus,proto3" json:"join_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FreeBalance) Reset()         { *m = FreeBalance{} }
func (m *FreeBalance) String() string { return proto.CompactTextString(m) }
func (*FreeBalance) ProtoMessage()    {}
func (*FreeBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{10}
}

func (m *FreeBalance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FreeBalance.Unmarshal(m, b)
}
func (m *FreeBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FreeBalance.Marshal(b, m, deterministic)
}
func (m *FreeBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FreeBalance.Merge(m, src)
}
func (m *FreeBalance) XXX_Size() int {
	return xxx_messageInfo_FreeBalance.Size(m)
}
func (m *FreeBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_FreeBalance.DiscardUnknown(m)
}

var xxx_messageInfo_FreeBalance proto.InternalMessageInfo

func (m *FreeBalance) GetFreeBalance() string {
	if m != nil {
		return m.FreeBalance
	}
	return ""
}

func (m *FreeBalance) GetJoinStatus() int32 {
	if m != nil {
		return m.JoinStatus
	}
	return 0
}

type Condition struct {
	OnChainDeployed      bool     `protobuf:"varint,1,opt,name=on_chain_deployed,json=onChainDeployed,proto3" json:"on_chain_deployed,omitempty"`
	ContractAddress      string   `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	IsFinalizedArgs      []byte   `protobuf:"bytes,3,opt,name=is_finalized_args,json=isFinalizedArgs,proto3" json:"is_finalized_args,omitempty"`
	GetOutcomeArgs       []byte   `protobuf:"bytes,4,opt,name=get_outcome_args,json=getOutcomeArgs,proto3" json:"get_outcome_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Condition) Reset()         { *m = Condition{} }
func (m *Condition) String() string { return proto.CompactTextString(m) }
func (*Condition) ProtoMessage()    {}
func (*Condition) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{11}
}

func (m *Condition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Condition.Unmarshal(m, b)
}
func (m *Condition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Condition.Marshal(b, m, deterministic)
}
func (m *Condition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Condition.Merge(m, src)
}
func (m *Condition) XXX_Size() int {
	return xxx_messageInfo_Condition.Size(m)
}
func (m *Condition) XXX_DiscardUnknown() {
	xxx_messageInfo_Condition.DiscardUnknown(m)
}

var xxx_messageInfo_Condition proto.InternalMessageInfo

func (m *Condition) GetOnChainDeployed() bool {
	if m != nil {
		return m.OnChainDeployed
	}
	return false
}

func (m *Condition) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *Condition) GetIsFinalizedArgs() []byte {
	if m != nil {
		return m.IsFinalizedArgs
	}
	return nil
}

func (m *Condition) GetGetOutcomeArgs() []byte {
	if m != nil {
		return m.GetOutcomeArgs
	}
	return nil
}

type SendConditionalPaymentRequest struct {
	TokenInfo            *TokenInfo                  `protobuf:"bytes,1,opt,name=token_info,json=tokenInfo,proto3" json:"token_info,omitempty"`
	Amount               string                      `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Destination          string                      `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	TransferLogicType    entity.TransferFunctionType `protobuf:"varint,4,opt,name=transfer_logic_type,json=transferLogicType,proto3,enum=entity.TransferFunctionType" json:"transfer_logic_type,omitempty"`
	Conditions           []*Condition                `protobuf:"bytes,5,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Timeout              uint64                      `protobuf:"varint,6,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Note                 *any.Any                    `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SendConditionalPaymentRequest) Reset()         { *m = SendConditionalPaymentRequest{} }
func (m *SendConditionalPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*SendConditionalPaymentRequest) ProtoMessage()    {}
func (*SendConditionalPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{12}
}

func (m *SendConditionalPaymentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendConditionalPaymentRequest.Unmarshal(m, b)
}
func (m *SendConditionalPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendConditionalPaymentRequest.Marshal(b, m, deterministic)
}
func (m *SendConditionalPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendConditionalPaymentRequest.Merge(m, src)
}
func (m *SendConditionalPaymentRequest) XXX_Size() int {
	return xxx_messageInfo_SendConditionalPaymentRequest.Size(m)
}
func (m *SendConditionalPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendConditionalPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendConditionalPaymentRequest proto.InternalMessageInfo

func (m *SendConditionalPaymentRequest) GetTokenInfo() *TokenInfo {
	if m != nil {
		return m.TokenInfo
	}
	return nil
}

func (m *SendConditionalPaymentRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *SendConditionalPaymentRequest) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *SendConditionalPaymentRequest) GetTransferLogicType() entity.TransferFunctionType {
	if m != nil {
		return m.TransferLogicType
	}
	return entity.TransferFunctionType_BOOLEAN_AND
}

func (m *SendConditionalPaymentRequest) GetConditions() []*Condition {
	if m != nil {
		return m.Conditions
	}
	return nil
}

func (m *SendConditionalPaymentRequest) GetTimeout() uint64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *SendConditionalPaymentRequest) GetNote() *any.Any {
	if m != nil {
		return m.Note
	}
	return nil
}

type PaymentID struct {
	PaymentId            string   `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentID) Reset()         { *m = PaymentID{} }
func (m *PaymentID) String() string { return proto.CompactTextString(m) }
func (*PaymentID) ProtoMessage()    {}
func (*PaymentID) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{13}
}

func (m *PaymentID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentID.Unmarshal(m, b)
}
func (m *PaymentID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentID.Marshal(b, m, deterministic)
}
func (m *PaymentID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentID.Merge(m, src)
}
func (m *PaymentID) XXX_Size() int {
	return xxx_messageInfo_PaymentID.Size(m)
}
func (m *PaymentID) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentID.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentID proto.InternalMessageInfo

func (m *PaymentID) GetPaymentId() string {
	if m != nil {
		return m.PaymentId
	}
	return ""
}

type PaymentInfo struct {
	PaymentId            string     `protobuf:"bytes,1,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	Sender               string     `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	Receiver             string     `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
	TokenInfo            *TokenInfo `protobuf:"bytes,4,opt,name=token_info,json=tokenInfo,proto3" json:"token_info,omitempty"`
	Amount               string     `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount,omitempty"`
	PaymentJson          string     `protobuf:"bytes,6,opt,name=payment_json,json=paymentJson,proto3" json:"payment_json,omitempty"`
	Status               uint32     `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *PaymentInfo) Reset()         { *m = PaymentInfo{} }
func (m *PaymentInfo) String() string { return proto.CompactTextString(m) }
func (*PaymentInfo) ProtoMessage()    {}
func (*PaymentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{14}
}

func (m *PaymentInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentInfo.Unmarshal(m, b)
}
func (m *PaymentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentInfo.Marshal(b, m, deterministic)
}
func (m *PaymentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentInfo.Merge(m, src)
}
func (m *PaymentInfo) XXX_Size() int {
	return xxx_messageInfo_PaymentInfo.Size(m)
}
func (m *PaymentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentInfo proto.InternalMessageInfo

func (m *PaymentInfo) GetPaymentId() string {
	if m != nil {
		return m.PaymentId
	}
	return ""
}

func (m *PaymentInfo) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *PaymentInfo) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *PaymentInfo) GetTokenInfo() *TokenInfo {
	if m != nil {
		return m.TokenInfo
	}
	return nil
}

func (m *PaymentInfo) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *PaymentInfo) GetPaymentJson() string {
	if m != nil {
		return m.PaymentJson
	}
	return ""
}

func (m *PaymentInfo) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type OutgoingPaymentInfo struct {
	Payment              *PaymentInfo `protobuf:"bytes,1,opt,name=payment,proto3" json:"payment,omitempty"`
	ErrorReason          string       `protobuf:"bytes,2,opt,name=error_reason,json=errorReason,proto3" json:"error_reason,omitempty"`
	ErrorCode            int64        `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *OutgoingPaymentInfo) Reset()         { *m = OutgoingPaymentInfo{} }
func (m *OutgoingPaymentInfo) String() string { return proto.CompactTextString(m) }
func (*OutgoingPaymentInfo) ProtoMessage()    {}
func (*OutgoingPaymentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{15}
}

func (m *OutgoingPaymentInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OutgoingPaymentInfo.Unmarshal(m, b)
}
func (m *OutgoingPaymentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OutgoingPaymentInfo.Marshal(b, m, deterministic)
}
func (m *OutgoingPaymentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingPaymentInfo.Merge(m, src)
}
func (m *OutgoingPaymentInfo) XXX_Size() int {
	return xxx_messageInfo_OutgoingPaymentInfo.Size(m)
}
func (m *OutgoingPaymentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingPaymentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingPaymentInfo proto.InternalMessageInfo

func (m *OutgoingPaymentInfo) GetPayment() *PaymentInfo {
	if m != nil {
		return m.Payment
	}
	return nil
}

func (m *OutgoingPaymentInfo) GetErrorReason() string {
	if m != nil {
		return m.ErrorReason
	}
	return ""
}

func (m *OutgoingPaymentInfo) GetErrorCode() int64 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type OnChainPaymentInfo struct {
	Amount               string   `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	ResolveDeadline      uint64   `protobuf:"varint,2,opt,name=resolve_deadline,json=resolveDeadline,proto3" json:"resolve_deadline,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OnChainPaymentInfo) Reset()         { *m = OnChainPaymentInfo{} }
func (m *OnChainPaymentInfo) String() string { return proto.CompactTextString(m) }
func (*OnChainPaymentInfo) ProtoMessage()    {}
func (*OnChainPaymentInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{16}
}

func (m *OnChainPaymentInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OnChainPaymentInfo.Unmarshal(m, b)
}
func (m *OnChainPaymentInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OnChainPaymentInfo.Marshal(b, m, deterministic)
}
func (m *OnChainPaymentInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OnChainPaymentInfo.Merge(m, src)
}
func (m *OnChainPaymentInfo) XXX_Size() int {
	return xxx_messageInfo_OnChainPaymentInfo.Size(m)
}
func (m *OnChainPaymentInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OnChainPaymentInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OnChainPaymentInfo proto.InternalMessageInfo

func (m *OnChainPaymentInfo) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *OnChainPaymentInfo) GetResolveDeadline() uint64 {
	if m != nil {
		return m.ResolveDeadline
	}
	return 0
}

type SessionID struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionID) Reset()         { *m = SessionID{} }
func (m *SessionID) String() string { return proto.CompactTextString(m) }
func (*SessionID) ProtoMessage()    {}
func (*SessionID) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{17}
}

func (m *SessionID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionID.Unmarshal(m, b)
}
func (m *SessionID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionID.Marshal(b, m, deterministic)
}
func (m *SessionID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionID.Merge(m, src)
}
func (m *SessionID) XXX_Size() int {
	return xxx_messageInfo_SessionID.Size(m)
}
func (m *SessionID) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionID.DiscardUnknown(m)
}

var xxx_messageInfo_SessionID proto.InternalMessageInfo

func (m *SessionID) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

type CreateAppSessionOnVirtualContractRequest struct {
	ContractBin          string   `protobuf:"bytes,1,opt,name=contract_bin,json=contractBin,proto3" json:"contract_bin,omitempty"`
	ContractConstructor  string   `protobuf:"bytes,2,opt,name=contract_constructor,json=contractConstructor,proto3" json:"contract_constructor,omitempty"`
	Nonce                uint64   `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	OnChainTimeout       uint64   `protobuf:"varint,4,opt,name=on_chain_timeout,json=onChainTimeout,proto3" json:"on_chain_timeout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateAppSessionOnVirtualContractRequest) Reset() {
	*m = CreateAppSessionOnVirtualContractRequest{}
}
func (m *CreateAppSessionOnVirtualContractRequest) String() string { return proto.CompactTextString(m) }
func (*CreateAppSessionOnVirtualContractRequest) ProtoMessage()    {}
func (*CreateAppSessionOnVirtualContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{18}
}

func (m *CreateAppSessionOnVirtualContractRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateAppSessionOnVirtualContractRequest.Unmarshal(m, b)
}
func (m *CreateAppSessionOnVirtualContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateAppSessionOnVirtualContractRequest.Marshal(b, m, deterministic)
}
func (m *CreateAppSessionOnVirtualContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAppSessionOnVirtualContractRequest.Merge(m, src)
}
func (m *CreateAppSessionOnVirtualContractRequest) XXX_Size() int {
	return xxx_messageInfo_CreateAppSessionOnVirtualContractRequest.Size(m)
}
func (m *CreateAppSessionOnVirtualContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAppSessionOnVirtualContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAppSessionOnVirtualContractRequest proto.InternalMessageInfo

func (m *CreateAppSessionOnVirtualContractRequest) GetContractBin() string {
	if m != nil {
		return m.ContractBin
	}
	return ""
}

func (m *CreateAppSessionOnVirtualContractRequest) GetContractConstructor() string {
	if m != nil {
		return m.ContractConstructor
	}
	return ""
}

func (m *CreateAppSessionOnVirtualContractRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *CreateAppSessionOnVirtualContractRequest) GetOnChainTimeout() uint64 {
	if m != nil {
		return m.OnChainTimeout
	}
	return 0
}

type CreateAppSessionOnDeployedContractRequest struct {
	ContractAddress      string   `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Nonce                uint64   `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	OnChainTimeout       uint64   `protobuf:"varint,3,opt,name=on_chain_timeout,json=onChainTimeout,proto3" json:"on_chain_timeout,omitempty"`
	Participants         []string `protobuf:"bytes,4,rep,name=participants,proto3" json:"participants,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateAppSessionOnDeployedContractRequest) Reset() {
	*m = CreateAppSessionOnDeployedContractRequest{}
}
func (m *CreateAppSessionOnDeployedContractRequest) String() string { return proto.CompactTextString(m) }
func (*CreateAppSessionOnDeployedContractRequest) ProtoMessage()    {}
func (*CreateAppSessionOnDeployedContractRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{19}
}

func (m *CreateAppSessionOnDeployedContractRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateAppSessionOnDeployedContractRequest.Unmarshal(m, b)
}
func (m *CreateAppSessionOnDeployedContractRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateAppSessionOnDeployedContractRequest.Marshal(b, m, deterministic)
}
func (m *CreateAppSessionOnDeployedContractRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAppSessionOnDeployedContractRequest.Merge(m, src)
}
func (m *CreateAppSessionOnDeployedContractRequest) XXX_Size() int {
	return xxx_messageInfo_CreateAppSessionOnDeployedContractRequest.Size(m)
}
func (m *CreateAppSessionOnDeployedContractRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAppSessionOnDeployedContractRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAppSessionOnDeployedContractRequest proto.InternalMessageInfo

func (m *CreateAppSessionOnDeployedContractRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *CreateAppSessionOnDeployedContractRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *CreateAppSessionOnDeployedContractRequest) GetOnChainTimeout() uint64 {
	if m != nil {
		return m.OnChainTimeout
	}
	return 0
}

func (m *CreateAppSessionOnDeployedContractRequest) GetParticipants() []string {
	if m != nil {
		return m.Participants
	}
	return nil
}

type DisputeInfo struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SeqNum               uint64   `protobuf:"varint,2,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisputeInfo) Reset()         { *m = DisputeInfo{} }
func (m *DisputeInfo) String() string { return proto.CompactTextString(m) }
func (*DisputeInfo) ProtoMessage()    {}
func (*DisputeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{20}
}

func (m *DisputeInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisputeInfo.Unmarshal(m, b)
}
func (m *DisputeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisputeInfo.Marshal(b, m, deterministic)
}
func (m *DisputeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisputeInfo.Merge(m, src)
}
func (m *DisputeInfo) XXX_Size() int {
	return xxx_messageInfo_DisputeInfo.Size(m)
}
func (m *DisputeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DisputeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DisputeInfo proto.InternalMessageInfo

func (m *DisputeInfo) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *DisputeInfo) GetSeqNum() uint64 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

type SignOutgoingStateRequest struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	State                []byte   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignOutgoingStateRequest) Reset()         { *m = SignOutgoingStateRequest{} }
func (m *SignOutgoingStateRequest) String() string { return proto.CompactTextString(m) }
func (*SignOutgoingStateRequest) ProtoMessage()    {}
func (*SignOutgoingStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{21}
}

func (m *SignOutgoingStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignOutgoingStateRequest.Unmarshal(m, b)
}
func (m *SignOutgoingStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignOutgoingStateRequest.Marshal(b, m, deterministic)
}
func (m *SignOutgoingStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignOutgoingStateRequest.Merge(m, src)
}
func (m *SignOutgoingStateRequest) XXX_Size() int {
	return xxx_messageInfo_SignOutgoingStateRequest.Size(m)
}
func (m *SignOutgoingStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignOutgoingStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignOutgoingStateRequest proto.InternalMessageInfo

func (m *SignOutgoingStateRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *SignOutgoingStateRequest) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

type SignedState struct {
	SignedState          []byte   `protobuf:"bytes,1,opt,name=signed_state,json=signedState,proto3" json:"signed_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignedState) Reset()         { *m = SignedState{} }
func (m *SignedState) String() string { return proto.CompactTextString(m) }
func (*SignedState) ProtoMessage()    {}
func (*SignedState) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{22}
}

func (m *SignedState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignedState.Unmarshal(m, b)
}
func (m *SignedState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignedState.Marshal(b, m, deterministic)
}
func (m *SignedState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedState.Merge(m, src)
}
func (m *SignedState) XXX_Size() int {
	return xxx_messageInfo_SignedState.Size(m)
}
func (m *SignedState) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedState.DiscardUnknown(m)
}

var xxx_messageInfo_SignedState proto.InternalMessageInfo

func (m *SignedState) GetSignedState() []byte {
	if m != nil {
		return m.SignedState
	}
	return nil
}

type Data struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{23}
}

func (m *Data) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Data.Unmarshal(m, b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Data.Marshal(b, m, deterministic)
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return xxx_messageInfo_Data.Size(m)
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Signature struct {
	Signature            []byte   `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{24}
}

func (m *Signature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signature.Unmarshal(m, b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return xxx_messageInfo_Signature.Size(m)
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ValidateAckRequest struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Envelope             []byte   `protobuf:"bytes,2,opt,name=envelope,proto3" json:"envelope,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateAckRequest) Reset()         { *m = ValidateAckRequest{} }
func (m *ValidateAckRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateAckRequest) ProtoMessage()    {}
func (*ValidateAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{25}
}

func (m *ValidateAckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateAckRequest.Unmarshal(m, b)
}
func (m *ValidateAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateAckRequest.Marshal(b, m, deterministic)
}
func (m *ValidateAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateAckRequest.Merge(m, src)
}
func (m *ValidateAckRequest) XXX_Size() int {
	return xxx_messageInfo_ValidateAckRequest.Size(m)
}
func (m *ValidateAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateAckRequest proto.InternalMessageInfo

func (m *ValidateAckRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *ValidateAckRequest) GetEnvelope() []byte {
	if m != nil {
		return m.Envelope
	}
	return nil
}

type BoolValue struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoolValue) Reset()         { *m = BoolValue{} }
func (m *BoolValue) String() string { return proto.CompactTextString(m) }
func (*BoolValue) ProtoMessage()    {}
func (*BoolValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{26}
}

func (m *BoolValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoolValue.Unmarshal(m, b)
}
func (m *BoolValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoolValue.Marshal(b, m, deterministic)
}
func (m *BoolValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolValue.Merge(m, src)
}
func (m *BoolValue) XXX_Size() int {
	return xxx_messageInfo_BoolValue.Size(m)
}
func (m *BoolValue) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolValue.DiscardUnknown(m)
}

var xxx_messageInfo_BoolValue proto.InternalMessageInfo

func (m *BoolValue) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type ProcessReceivedStateRequest struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Envelope             []byte   `protobuf:"bytes,2,opt,name=envelope,proto3" json:"envelope,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessReceivedStateRequest) Reset()         { *m = ProcessReceivedStateRequest{} }
func (m *ProcessReceivedStateRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessReceivedStateRequest) ProtoMessage()    {}
func (*ProcessReceivedStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{27}
}

func (m *ProcessReceivedStateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessReceivedStateRequest.Unmarshal(m, b)
}
func (m *ProcessReceivedStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessReceivedStateRequest.Marshal(b, m, deterministic)
}
func (m *ProcessReceivedStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessReceivedStateRequest.Merge(m, src)
}
func (m *ProcessReceivedStateRequest) XXX_Size() int {
	return xxx_messageInfo_ProcessReceivedStateRequest.Size(m)
}
func (m *ProcessReceivedStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessReceivedStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessReceivedStateRequest proto.InternalMessageInfo

func (m *ProcessReceivedStateRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *ProcessReceivedStateRequest) GetEnvelope() []byte {
	if m != nil {
		return m.Envelope
	}
	return nil
}

type ProcessReceivedStateResponse struct {
	DecodedState         []byte   `protobuf:"bytes,1,opt,name=decoded_state,json=decodedState,proto3" json:"decoded_state,omitempty"`
	PreparedAck          []byte   `protobuf:"bytes,2,opt,name=prepared_ack,json=preparedAck,proto3" json:"prepared_ack,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcessReceivedStateResponse) Reset()         { *m = ProcessReceivedStateResponse{} }
func (m *ProcessReceivedStateResponse) String() string { return proto.CompactTextString(m) }
func (*ProcessReceivedStateResponse) ProtoMessage()    {}
func (*ProcessReceivedStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{28}
}

func (m *ProcessReceivedStateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessReceivedStateResponse.Unmarshal(m, b)
}
func (m *ProcessReceivedStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessReceivedStateResponse.Marshal(b, m, deterministic)
}
func (m *ProcessReceivedStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessReceivedStateResponse.Merge(m, src)
}
func (m *ProcessReceivedStateResponse) XXX_Size() int {
	return xxx_messageInfo_ProcessReceivedStateResponse.Size(m)
}
func (m *ProcessReceivedStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessReceivedStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessReceivedStateResponse proto.InternalMessageInfo

func (m *ProcessReceivedStateResponse) GetDecodedState() []byte {
	if m != nil {
		return m.DecodedState
	}
	return nil
}

func (m *ProcessReceivedStateResponse) GetPreparedAck() []byte {
	if m != nil {
		return m.PreparedAck
	}
	return nil
}

type SettleAppSessionRequest struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	StateProof           []byte   `protobuf:"bytes,2,opt,name=state_proof,json=stateProof,proto3" json:"state_proof,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettleAppSessionRequest) Reset()         { *m = SettleAppSessionRequest{} }
func (m *SettleAppSessionRequest) String() string { return proto.CompactTextString(m) }
func (*SettleAppSessionRequest) ProtoMessage()    {}
func (*SettleAppSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{29}
}

func (m *SettleAppSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettleAppSessionRequest.Unmarshal(m, b)
}
func (m *SettleAppSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettleAppSessionRequest.Marshal(b, m, deterministic)
}
func (m *SettleAppSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettleAppSessionRequest.Merge(m, src)
}
func (m *SettleAppSessionRequest) XXX_Size() int {
	return xxx_messageInfo_SettleAppSessionRequest.Size(m)
}
func (m *SettleAppSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SettleAppSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SettleAppSessionRequest proto.InternalMessageInfo

func (m *SettleAppSessionRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *SettleAppSessionRequest) GetStateProof() []byte {
	if m != nil {
		return m.StateProof
	}
	return nil
}

type SettleAppSessionByTimeoutRequest struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	OracleProof          []byte   `protobuf:"bytes,2,opt,name=oracle_proof,json=oracleProof,proto3" json:"oracle_proof,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettleAppSessionByTimeoutRequest) Reset()         { *m = SettleAppSessionByTimeoutRequest{} }
func (m *SettleAppSessionByTimeoutRequest) String() string { return proto.CompactTextString(m) }
func (*SettleAppSessionByTimeoutRequest) ProtoMessage()    {}
func (*SettleAppSessionByTimeoutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{30}
}

func (m *SettleAppSessionByTimeoutRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettleAppSessionByTimeoutRequest.Unmarshal(m, b)
}
func (m *SettleAppSessionByTimeoutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettleAppSessionByTimeoutRequest.Marshal(b, m, deterministic)
}
func (m *SettleAppSessionByTimeoutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettleAppSessionByTimeoutRequest.Merge(m, src)
}
func (m *SettleAppSessionByTimeoutRequest) XXX_Size() int {
	return xxx_messageInfo_SettleAppSessionByTimeoutRequest.Size(m)
}
func (m *SettleAppSessionByTimeoutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SettleAppSessionByTimeoutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SettleAppSessionByTimeoutRequest proto.InternalMessageInfo

func (m *SettleAppSessionByTimeoutRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *SettleAppSessionByTimeoutRequest) GetOracleProof() []byte {
	if m != nil {
		return m.OracleProof
	}
	return nil
}

type SettleAppSessionByInvalidityRequest struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	OracleProof          []byte   `protobuf:"bytes,2,opt,name=oracle_proof,json=oracleProof,proto3" json:"oracle_proof,omitempty"`
	CosignedStateProof   []byte   `protobuf:"bytes,3,opt,name=cosigned_state_proof,json=cosignedStateProof,proto3" json:"cosigned_state_proof,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SettleAppSessionByInvalidityRequest) Reset()         { *m = SettleAppSessionByInvalidityRequest{} }
func (m *SettleAppSessionByInvalidityRequest) String() string { return proto.CompactTextString(m) }
func (*SettleAppSessionByInvalidityRequest) ProtoMessage()    {}
func (*SettleAppSessionByInvalidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{31}
}

func (m *SettleAppSessionByInvalidityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SettleAppSessionByInvalidityRequest.Unmarshal(m, b)
}
func (m *SettleAppSessionByInvalidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SettleAppSessionByInvalidityRequest.Marshal(b, m, deterministic)
}
func (m *SettleAppSessionByInvalidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettleAppSessionByInvalidityRequest.Merge(m, src)
}
func (m *SettleAppSessionByInvalidityRequest) XXX_Size() int {
	return xxx_messageInfo_SettleAppSessionByInvalidityRequest.Size(m)
}
func (m *SettleAppSessionByInvalidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SettleAppSessionByInvalidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SettleAppSessionByInvalidityRequest proto.InternalMessageInfo

func (m *SettleAppSessionByInvalidityRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *SettleAppSessionByInvalidityRequest) GetOracleProof() []byte {
	if m != nil {
		return m.OracleProof
	}
	return nil
}

func (m *SettleAppSessionByInvalidityRequest) GetCosignedStateProof() []byte {
	if m != nil {
		return m.CosignedStateProof
	}
	return nil
}

type Address struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{32}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type GetBooleanOutcomeForAppSessionRequest struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Query                []byte   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBooleanOutcomeForAppSessionRequest) Reset()         { *m = GetBooleanOutcomeForAppSessionRequest{} }
func (m *GetBooleanOutcomeForAppSessionRequest) String() string { return proto.CompactTextString(m) }
func (*GetBooleanOutcomeForAppSessionRequest) ProtoMessage()    {}
func (*GetBooleanOutcomeForAppSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{33}
}

func (m *GetBooleanOutcomeForAppSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBooleanOutcomeForAppSessionRequest.Unmarshal(m, b)
}
func (m *GetBooleanOutcomeForAppSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBooleanOutcomeForAppSessionRequest.Marshal(b, m, deterministic)
}
func (m *GetBooleanOutcomeForAppSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBooleanOutcomeForAppSessionRequest.Merge(m, src)
}
func (m *GetBooleanOutcomeForAppSessionRequest) XXX_Size() int {
	return xxx_messageInfo_GetBooleanOutcomeForAppSessionRequest.Size(m)
}
func (m *GetBooleanOutcomeForAppSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBooleanOutcomeForAppSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBooleanOutcomeForAppSessionRequest proto.InternalMessageInfo

func (m *GetBooleanOutcomeForAppSessionRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *GetBooleanOutcomeForAppSessionRequest) GetQuery() []byte {
	if m != nil {
		return m.Query
	}
	return nil
}

type BooleanOutcome struct {
	Finalized            bool     `protobuf:"varint,1,opt,name=finalized,proto3" json:"finalized,omitempty"`
	Outcome              bool     `protobuf:"varint,2,opt,name=outcome,proto3" json:"outcome,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BooleanOutcome) Reset()         { *m = BooleanOutcome{} }
func (m *BooleanOutcome) String() string { return proto.CompactTextString(m) }
func (*BooleanOutcome) ProtoMessage()    {}
func (*BooleanOutcome) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{34}
}

func (m *BooleanOutcome) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BooleanOutcome.Unmarshal(m, b)
}
func (m *BooleanOutcome) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BooleanOutcome.Marshal(b, m, deterministic)
}
func (m *BooleanOutcome) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BooleanOutcome.Merge(m, src)
}
func (m *BooleanOutcome) XXX_Size() int {
	return xxx_messageInfo_BooleanOutcome.Size(m)
}
func (m *BooleanOutcome) XXX_DiscardUnknown() {
	xxx_messageInfo_BooleanOutcome.DiscardUnknown(m)
}

var xxx_messageInfo_BooleanOutcome proto.InternalMessageInfo

func (m *BooleanOutcome) GetFinalized() bool {
	if m != nil {
		return m.Finalized
	}
	return false
}

func (m *BooleanOutcome) GetOutcome() bool {
	if m != nil {
		return m.Outcome
	}
	return false
}

type ApplyActionForAppSessionRequest struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Action               []byte   `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ApplyActionForAppSessionRequest) Reset()         { *m = ApplyActionForAppSessionRequest{} }
func (m *ApplyActionForAppSessionRequest) String() string { return proto.CompactTextString(m) }
func (*ApplyActionForAppSessionRequest) ProtoMessage()    {}
func (*ApplyActionForAppSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{35}
}

func (m *ApplyActionForAppSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ApplyActionForAppSessionRequest.Unmarshal(m, b)
}
func (m *ApplyActionForAppSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ApplyActionForAppSessionRequest.Marshal(b, m, deterministic)
}
func (m *ApplyActionForAppSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ApplyActionForAppSessionRequest.Merge(m, src)
}
func (m *ApplyActionForAppSessionRequest) XXX_Size() int {
	return xxx_messageInfo_ApplyActionForAppSessionRequest.Size(m)
}
func (m *ApplyActionForAppSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ApplyActionForAppSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ApplyActionForAppSessionRequest proto.InternalMessageInfo

func (m *ApplyActionForAppSessionRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *ApplyActionForAppSessionRequest) GetAction() []byte {
	if m != nil {
		return m.Action
	}
	return nil
}

type BlockNumber struct {
	BlockNumber          uint64   `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockNumber) Reset()         { *m = BlockNumber{} }
func (m *BlockNumber) String() string { return proto.CompactTextString(m) }
func (*BlockNumber) ProtoMessage()    {}
func (*BlockNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{36}
}

func (m *BlockNumber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockNumber.Unmarshal(m, b)
}
func (m *BlockNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockNumber.Marshal(b, m, deterministic)
}
func (m *BlockNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockNumber.Merge(m, src)
}
func (m *BlockNumber) XXX_Size() int {
	return xxx_messageInfo_BlockNumber.Size(m)
}
func (m *BlockNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockNumber.DiscardUnknown(m)
}

var xxx_messageInfo_BlockNumber proto.InternalMessageInfo

func (m *BlockNumber) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type AppSessionStatus struct {
	Status               uint32   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppSessionStatus) Reset()         { *m = AppSessionStatus{} }
func (m *AppSessionStatus) String() string { return proto.CompactTextString(m) }
func (*AppSessionStatus) ProtoMessage()    {}
func (*AppSessionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{37}
}

func (m *AppSessionStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppSessionStatus.Unmarshal(m, b)
}
func (m *AppSessionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppSessionStatus.Marshal(b, m, deterministic)
}
func (m *AppSessionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppSessionStatus.Merge(m, src)
}
func (m *AppSessionStatus) XXX_Size() int {
	return xxx_messageInfo_AppSessionStatus.Size(m)
}
func (m *AppSessionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_AppSessionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_AppSessionStatus proto.InternalMessageInfo

func (m *AppSessionStatus) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type GetStateForAppSessionRequest struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Key                  int64    `protobuf:"varint,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStateForAppSessionRequest) Reset()         { *m = GetStateForAppSessionRequest{} }
func (m *GetStateForAppSessionRequest) String() string { return proto.CompactTextString(m) }
func (*GetStateForAppSessionRequest) ProtoMessage()    {}
func (*GetStateForAppSessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{38}
}

func (m *GetStateForAppSessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStateForAppSessionRequest.Unmarshal(m, b)
}
func (m *GetStateForAppSessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStateForAppSessionRequest.Marshal(b, m, deterministic)
}
func (m *GetStateForAppSessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStateForAppSessionRequest.Merge(m, src)
}
func (m *GetStateForAppSessionRequest) XXX_Size() int {
	return xxx_messageInfo_GetStateForAppSessionRequest.Size(m)
}
func (m *GetStateForAppSessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStateForAppSessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetStateForAppSessionRequest proto.InternalMessageInfo

func (m *GetStateForAppSessionRequest) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *GetStateForAppSessionRequest) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return 0
}

type AppSessionState struct {
	State                []byte   `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppSessionState) Reset()         { *m = AppSessionState{} }
func (m *AppSessionState) String() string { return proto.CompactTextString(m) }
func (*AppSessionState) ProtoMessage()    {}
func (*AppSessionState) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{39}
}

func (m *AppSessionState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppSessionState.Unmarshal(m, b)
}
func (m *AppSessionState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppSessionState.Marshal(b, m, deterministic)
}
func (m *AppSessionState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppSessionState.Merge(m, src)
}
func (m *AppSessionState) XXX_Size() int {
	return xxx_messageInfo_AppSessionState.Size(m)
}
func (m *AppSessionState) XXX_DiscardUnknown() {
	xxx_messageInfo_AppSessionState.DiscardUnknown(m)
}

var xxx_messageInfo_AppSessionState proto.InternalMessageInfo

func (m *AppSessionState) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

type AppSessionSeqNum struct {
	SeqNum               uint64   `protobuf:"varint,1,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppSessionSeqNum) Reset()         { *m = AppSessionSeqNum{} }
func (m *AppSessionSeqNum) String() string { return proto.CompactTextString(m) }
func (*AppSessionSeqNum) ProtoMessage()    {}
func (*AppSessionSeqNum) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{40}
}

func (m *AppSessionSeqNum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppSessionSeqNum.Unmarshal(m, b)
}
func (m *AppSessionSeqNum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppSessionSeqNum.Marshal(b, m, deterministic)
}
func (m *AppSessionSeqNum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppSessionSeqNum.Merge(m, src)
}
func (m *AppSessionSeqNum) XXX_Size() int {
	return xxx_messageInfo_AppSessionSeqNum.Size(m)
}
func (m *AppSessionSeqNum) XXX_DiscardUnknown() {
	xxx_messageInfo_AppSessionSeqNum.DiscardUnknown(m)
}

var xxx_messageInfo_AppSessionSeqNum proto.InternalMessageInfo

func (m *AppSessionSeqNum) GetSeqNum() uint64 {
	if m != nil {
		return m.SeqNum
	}
	return 0
}

type SetMsgDropReq struct {
	DropRecv             bool     `protobuf:"varint,1,opt,name=drop_recv,json=dropRecv,proto3" json:"drop_recv,omitempty"`
	DropSend             bool     `protobuf:"varint,2,opt,name=drop_send,json=dropSend,proto3" json:"drop_send,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetMsgDropReq) Reset()         { *m = SetMsgDropReq{} }
func (m *SetMsgDropReq) String() string { return proto.CompactTextString(m) }
func (*SetMsgDropReq) ProtoMessage()    {}
func (*SetMsgDropReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{41}
}

func (m *SetMsgDropReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetMsgDropReq.Unmarshal(m, b)
}
func (m *SetMsgDropReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetMsgDropReq.Marshal(b, m, deterministic)
}
func (m *SetMsgDropReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMsgDropReq.Merge(m, src)
}
func (m *SetMsgDropReq) XXX_Size() int {
	return xxx_messageInfo_SetMsgDropReq.Size(m)
}
func (m *SetMsgDropReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMsgDropReq.DiscardUnknown(m)
}

var xxx_messageInfo_SetMsgDropReq proto.InternalMessageInfo

func (m *SetMsgDropReq) GetDropRecv() bool {
	if m != nil {
		return m.DropRecv
	}
	return false
}

func (m *SetMsgDropReq) GetDropSend() bool {
	if m != nil {
		return m.DropSend
	}
	return false
}

type PaymentStatus struct {
	Status               uint32   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PaymentStatus) Reset()         { *m = PaymentStatus{} }
func (m *PaymentStatus) String() string { return proto.CompactTextString(m) }
func (*PaymentStatus) ProtoMessage()    {}
func (*PaymentStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_4cedb4ba9fba0c04, []int{42}
}

func (m *PaymentStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PaymentStatus.Unmarshal(m, b)
}
func (m *PaymentStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PaymentStatus.Marshal(b, m, deterministic)
}
func (m *PaymentStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentStatus.Merge(m, src)
}
func (m *PaymentStatus) XXX_Size() int {
	return xxx_messageInfo_PaymentStatus.Size(m)
}
func (m *PaymentStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentStatus proto.InternalMessageInfo

func (m *PaymentStatus) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*GetPayHistoryRequest)(nil), "webrpc.GetPayHistoryRequest")
	proto.RegisterType((*GetPayHistoryResponse)(nil), "webrpc.GetPayHistoryResponse")
	proto.RegisterType((*TokenInfo)(nil), "webrpc.TokenInfo")
	proto.RegisterType((*SetDelegationRequest)(nil), "webrpc.SetDelegationRequest")
	proto.RegisterType((*OpenPaymentChannelRequest)(nil), "webrpc.OpenPaymentChannelRequest")
	proto.RegisterType((*ChannelID)(nil), "webrpc.ChannelID")
	proto.RegisterType((*DepositOrWithdrawRequest)(nil), "webrpc.DepositOrWithdrawRequest")
	proto.RegisterType((*DepositOrWithdrawJob)(nil), "webrpc.DepositOrWithdrawJob")
	proto.RegisterType((*GetBalanceResponse)(nil), "webrpc.GetBalanceResponse")
	proto.RegisterType((*GetPeerFreeBalanceRequest)(nil), "webrpc.GetPeerFreeBalanceRequest")
	proto.RegisterType((*FreeBalance)(nil), "webrpc.FreeBalance")
	proto.RegisterType((*Condition)(nil), "webrpc.Condition")
	proto.RegisterType((*SendConditionalPaymentRequest)(nil), "webrpc.SendConditionalPaymentRequest")
	proto.RegisterType((*PaymentID)(nil), "webrpc.PaymentID")
	proto.RegisterType((*PaymentInfo)(nil), "webrpc.PaymentInfo")
	proto.RegisterType((*OutgoingPaymentInfo)(nil), "webrpc.OutgoingPaymentInfo")
	proto.RegisterType((*OnChainPaymentInfo)(nil), "webrpc.OnChainPaymentInfo")
	proto.RegisterType((*SessionID)(nil), "webrpc.SessionID")
	proto.RegisterType((*CreateAppSessionOnVirtualContractRequest)(nil), "webrpc.CreateAppSessionOnVirtualContractRequest")
	proto.RegisterType((*CreateAppSessionOnDeployedContractRequest)(nil), "webrpc.CreateAppSessionOnDeployedContractRequest")
	proto.RegisterType((*DisputeInfo)(nil), "webrpc.DisputeInfo")
	proto.RegisterType((*SignOutgoingStateRequest)(nil), "webrpc.SignOutgoingStateRequest")
	proto.RegisterType((*SignedState)(nil), "webrpc.SignedState")
	proto.RegisterType((*Data)(nil), "webrpc.Data")
	proto.RegisterType((*Signature)(nil), "webrpc.Signature")
	proto.RegisterType((*ValidateAckRequest)(nil), "webrpc.ValidateAckRequest")
	proto.RegisterType((*BoolValue)(nil), "webrpc.BoolValue")
	proto.RegisterType((*ProcessReceivedStateRequest)(nil), "webrpc.ProcessReceivedStateRequest")
	proto.RegisterType((*ProcessReceivedStateResponse)(nil), "webrpc.ProcessReceivedStateResponse")
	proto.RegisterType((*SettleAppSessionRequest)(nil), "webrpc.SettleAppSessionRequest")
	proto.RegisterType((*SettleAppSessionByTimeoutRequest)(nil), "webrpc.SettleAppSessionByTimeoutRequest")
	proto.RegisterType((*SettleAppSessionByInvalidityRequest)(nil), "webrpc.SettleAppSessionByInvalidityRequest")
	proto.RegisterType((*Address)(nil), "webrpc.Address")
	proto.RegisterType((*GetBooleanOutcomeForAppSessionRequest)(nil), "webrpc.GetBooleanOutcomeForAppSessionRequest")
	proto.RegisterType((*BooleanOutcome)(nil), "webrpc.BooleanOutcome")
	proto.RegisterType((*ApplyActionForAppSessionRequest)(nil), "webrpc.ApplyActionForAppSessionRequest")
	proto.RegisterType((*BlockNumber)(nil), "webrpc.BlockNumber")
	proto.RegisterType((*AppSessionStatus)(nil), "webrpc.AppSessionStatus")
	proto.RegisterType((*GetStateForAppSessionRequest)(nil), "webrpc.GetStateForAppSessionRequest")
	proto.RegisterType((*AppSessionState)(nil), "webrpc.AppSessionState")
	proto.RegisterType((*AppSessionSeqNum)(nil), "webrpc.AppSessionSeqNum")
	proto.RegisterType((*SetMsgDropReq)(nil), "webrpc.SetMsgDropReq")
	proto.RegisterType((*PaymentStatus)(nil), "webrpc.PaymentStatus")
}

func init() { proto.RegisterFile("web_api.proto", fileDescriptor_4cedb4ba9fba0c04) }

var fileDescriptor_4cedb4ba9fba0c04 = []byte{
	// 2533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xd9, 0x76, 0x1b, 0xc7,
	0xd1, 0x06, 0xcc, 0x4d, 0x28, 0x80, 0x5b, 0x8b, 0x92, 0x21, 0x88, 0x32, 0xc9, 0x91, 0xfd, 0x8b,
	0xb2, 0x8f, 0x28, 0x59, 0xff, 0x75, 0x16, 0x8a, 0x14, 0x29, 0x2a, 0xa2, 0x40, 0x0f, 0x78, 0x2c,
	0x3b, 0x27, 0x39, 0x38, 0x8d, 0x99, 0x22, 0x38, 0x24, 0xd0, 0x3d, 0xec, 0x69, 0x50, 0x46, 0x1e,
	0x20, 0x77, 0x79, 0x80, 0xbc, 0x49, 0x4e, 0xae, 0xf2, 0x08, 0x79, 0x88, 0xe4, 0x3d, 0x72, 0x7a,
	0x99, 0x05, 0xcb, 0x80, 0x8b, 0x79, 0x87, 0xae, 0xae, 0xf9, 0xaa, 0xba, 0xba, 0xab, 0xba, 0xbe,
	0x06, 0xcc, 0x7f, 0xc6, 0x56, 0x93, 0x86, 0xc1, 0x56, 0x28, 0xb8, 0xe4, 0x64, 0xf6, 0x33, 0xb6,
	0x44, 0xe8, 0xd5, 0x1e, 0xb5, 0x39, 0x6f, 0x77, 0xf0, 0xa5, 0x96, 0xb6, 0x7a, 0x27, 0x2f, 0x29,
	0xeb, 0x1b, 0x95, 0xda, 0xe3, 0xe1, 0x29, 0xec, 0x86, 0x32, 0x9e, 0xac, 0x20, 0x93, 0x41, 0x32,
	0x9a, 0xef, 0x62, 0x14, 0xd1, 0x36, 0x9a, 0xa1, 0xf3, 0x33, 0xac, 0xec, 0xa3, 0x3c, 0xa2, 0xfd,
	0x77, 0x41, 0x24, 0xb9, 0xe8, 0xbb, 0x78, 0xd1, 0xc3, 0x48, 0x92, 0x27, 0x00, 0x27, 0x82, 0x77,
	0x9b, 0x91, 0xa4, 0x42, 0x56, 0x8b, 0xeb, 0xc5, 0xcd, 0x7b, 0x6e, 0x49, 0x49, 0x1a, 0x4a, 0x40,
	0x1c, 0xa8, 0x04, 0x12, 0xbb, 0xd1, 0x11, 0x8a, 0x23, 0xda, 0xc6, 0xea, 0x17, 0xeb, 0xc5, 0xcd,
	0x19, 0x77, 0x40, 0xe6, 0x9c, 0xc1, 0x83, 0x21, 0xe8, 0x28, 0xe4, 0x2c, 0x42, 0xf2, 0x1c, 0xa6,
	0x43, 0xda, 0x8f, 0xaa, 0xc5, 0xf5, 0xa9, 0xcd, 0xf2, 0xeb, 0x07, 0x5b, 0x22, 0xf4, 0xb6, 0xea,
	0x0c, 0x8d, 0x5a, 0xe0, 0xd1, 0xce, 0x11, 0xed, 0xbb, 0x5a, 0x85, 0xfc, 0x1f, 0x2c, 0x9e, 0xd2,
	0xa8, 0xd9, 0xe5, 0x02, 0x9b, 0x02, 0xa3, 0x5e, 0x47, 0x6a, 0x53, 0xf7, 0xdc, 0xf9, 0x53, 0x1a,
	0x1d, 0x72, 0x81, 0xae, 0x16, 0x3a, 0x2d, 0x28, 0x1d, 0xf3, 0x73, 0x64, 0x07, 0xec, 0x84, 0x93,
	0x57, 0x00, 0x52, 0x0d, 0x9a, 0xb2, 0x1f, 0xa2, 0xf6, 0x7d, 0xe1, 0xf5, 0xf2, 0x96, 0x8d, 0x82,
	0x56, 0x3b, 0xee, 0x87, 0xe8, 0x96, 0x64, 0xfc, 0x93, 0x3c, 0x85, 0x79, 0xf3, 0x05, 0xf5, 0x7d,
	0x81, 0x51, 0xa4, 0x8d, 0x94, 0xdc, 0x8a, 0x16, 0x6e, 0x1b, 0x99, 0x73, 0x01, 0x2b, 0x0d, 0x94,
	0xbb, 0xd8, 0xc1, 0x36, 0x95, 0x01, 0x67, 0x71, 0xa8, 0x5e, 0x43, 0xd9, 0x7c, 0x1c, 0xb0, 0x13,
	0x1e, 0xaf, 0x6a, 0x79, 0xcb, 0xec, 0xda, 0x56, 0xe2, 0x96, 0x6b, 0x9c, 0x52, 0x3f, 0x23, 0xf2,
	0x0d, 0x2c, 0xb4, 0x3a, 0xdc, 0x3b, 0x6f, 0xfa, 0x3d, 0xa1, 0xc1, 0xb4, 0xc5, 0x29, 0x77, 0x5e,
	0x4b, 0x77, 0xad, 0xd0, 0xf9, 0x6b, 0x11, 0x1e, 0xd5, 0x43, 0x64, 0x47, 0xb4, 0xdf, 0x45, 0x26,
	0x77, 0x4e, 0x29, 0x63, 0xd8, 0x89, 0x0d, 0x27, 0xeb, 0x54, 0x86, 0xf5, 0x3a, 0xc7, 0xda, 0x2d,
	0x25, 0x76, 0xc9, 0x43, 0x98, 0xa5, 0x5d, 0xde, 0x63, 0xd2, 0x2e, 0xd0, 0x8e, 0xc8, 0x1a, 0x94,
	0x43, 0x44, 0xd1, 0xb4, 0x93, 0x53, 0x7a, 0x12, 0x94, 0x68, 0x5b, 0x4b, 0x9c, 0x6f, 0xa1, 0x64,
	0x8d, 0x1f, 0xec, 0xaa, 0xb3, 0xe1, 0x99, 0x41, 0x33, 0xf0, 0xb5, 0xdd, 0x92, 0x5b, 0xb2, 0x92,
	0x03, 0xdf, 0xf1, 0xa1, 0xba, 0x8b, 0x21, 0x8f, 0x02, 0x59, 0x17, 0x9f, 0x02, 0x79, 0xea, 0x0b,
	0xfa, 0xf9, 0xce, 0x5d, 0x76, 0xf6, 0x60, 0x65, 0xc4, 0xca, 0x7b, 0xde, 0x22, 0x0f, 0x60, 0xf6,
	0x8c, 0xb7, 0x52, 0xc7, 0x66, 0xce, 0x78, 0xeb, 0xc0, 0x27, 0x5f, 0xc2, 0x9c, 0xfc, 0xa5, 0x79,
	0x4a, 0xa3, 0xd3, 0x18, 0x47, 0xfe, 0xf2, 0x8e, 0x46, 0xa7, 0xce, 0xdf, 0x8a, 0x40, 0xf6, 0x51,
	0xbe, 0xa1, 0x1d, 0xca, 0x3c, 0x4c, 0xce, 0xe8, 0x06, 0x54, 0x4e, 0x04, 0x62, 0xb3, 0x65, 0xe4,
	0x16, 0xac, 0xac, 0x64, 0x56, 0x55, 0xed, 0xa1, 0xda, 0x2c, 0xf4, 0x13, 0x25, 0x83, 0x3c, 0x6f,
	0xa4, 0xb1, 0xda, 0x0b, 0x20, 0x02, 0x3d, 0x0c, 0x2e, 0x03, 0xd6, 0x6e, 0x7a, 0x34, 0xa4, 0x5e,
	0x20, 0xfb, 0x36, 0xc4, 0xcb, 0xc9, 0xcc, 0x8e, 0x9d, 0x70, 0x42, 0x78, 0xa4, 0xb2, 0x06, 0x51,
	0xec, 0xa5, 0xb6, 0x6e, 0x1f, 0xbe, 0x0d, 0xa8, 0x98, 0x9d, 0x1d, 0x38, 0xd8, 0x7a, 0xb7, 0xe3,
	0x73, 0xfd, 0x03, 0x94, 0x33, 0xa6, 0xae, 0xb3, 0xf2, 0x35, 0x28, 0x9f, 0xf1, 0x80, 0xa9, 0xe2,
	0x20, 0x7b, 0x91, 0x4d, 0x7e, 0x50, 0xa2, 0x86, 0x96, 0x38, 0xff, 0x28, 0x42, 0x69, 0x87, 0x33,
	0x3f, 0x50, 0xa7, 0x98, 0x7c, 0x0b, 0xcb, 0x9c, 0x35, 0xbd, 0x53, 0x1a, 0xb0, 0xa6, 0x8f, 0x61,
	0x87, 0xf7, 0xd1, 0xb7, 0x25, 0x65, 0x91, 0xb3, 0x1d, 0x25, 0xdf, 0xb5, 0x62, 0xf2, 0x1c, 0x96,
	0x3c, 0xce, 0xa4, 0xa0, 0x9e, 0x1c, 0xf2, 0x79, 0x31, 0x96, 0x5b, 0xbf, 0x15, 0x6c, 0x10, 0x35,
	0x4f, 0x02, 0x46, 0x3b, 0xc1, 0x5f, 0xd0, 0x6f, 0x52, 0xd1, 0x8e, 0x74, 0x5c, 0x2b, 0xee, 0x62,
	0x10, 0xed, 0xc5, 0xf2, 0x6d, 0xd1, 0x8e, 0xc8, 0x26, 0x2c, 0xb5, 0x51, 0x36, 0x79, 0x4f, 0x7a,
	0xbc, 0x8b, 0x46, 0x75, 0x5a, 0xab, 0x2e, 0xb4, 0x51, 0xd6, 0x8d, 0x58, 0x69, 0x3a, 0xff, 0xfe,
	0x02, 0x9e, 0x34, 0x90, 0xf9, 0x89, 0xfb, 0xba, 0x1c, 0xa9, 0xec, 0xbb, 0xfb, 0xb4, 0x5b, 0x87,
	0xb2, 0x8f, 0x91, 0x0c, 0x98, 0x29, 0x01, 0xe6, 0x4c, 0x64, 0x45, 0xe4, 0x03, 0xdc, 0x97, 0x82,
	0xb2, 0xe8, 0x04, 0x45, 0xb3, 0xc3, 0xdb, 0x81, 0x67, 0x6a, 0xda, 0xb4, 0xae, 0x69, 0xab, 0x49,
	0x4d, 0xb3, 0x2a, 0x7b, 0x3d, 0xe6, 0xa9, 0xcf, 0x74, 0x79, 0x5b, 0x8e, 0x3f, 0xfc, 0xa0, 0xbe,
	0xd3, 0x65, 0xee, 0x7b, 0x00, 0x2f, 0x5e, 0x56, 0x54, 0x9d, 0x19, 0x2c, 0x54, 0xc9, 0x82, 0xdd,
	0x8c, 0x12, 0xa9, 0xc2, 0x9c, 0x0c, 0xba, 0xc8, 0x7b, 0xb2, 0x3a, 0xbb, 0x5e, 0xdc, 0x9c, 0x76,
	0xe3, 0x21, 0xd9, 0x84, 0x69, 0xc6, 0x25, 0x56, 0xe7, 0x74, 0x00, 0x56, 0xb6, 0xcc, 0x15, 0xb4,
	0x15, 0x5f, 0x41, 0x5b, 0xdb, 0xac, 0xef, 0x6a, 0x0d, 0x55, 0x3c, 0x6c, 0x08, 0x4d, 0xf1, 0x08,
	0xcd, 0x20, 0x53, 0x3c, 0xac, 0xe4, 0xc0, 0x77, 0xfe, 0x5b, 0x84, 0x72, 0xac, 0xac, 0x42, 0x37,
	0x59, 0x5d, 0x45, 0x36, 0x42, 0xe6, 0xa3, 0x88, 0x23, 0x6b, 0x46, 0xa4, 0x06, 0xf7, 0x4c, 0x6a,
	0xa1, 0xb0, 0x61, 0x4d, 0xc6, 0x43, 0xfb, 0x37, 0x7d, 0xa3, 0xfd, 0x9b, 0x19, 0xd8, 0x3f, 0x95,
	0x5c, 0xd6, 0xb9, 0xb3, 0x88, 0x33, 0x1d, 0x21, 0x95, 0x5c, 0x46, 0xf6, 0x3e, 0xe2, 0x4c, 0x3b,
	0x68, 0xb2, 0x44, 0xc5, 0x69, 0xde, 0xb5, 0x23, 0x55, 0xd9, 0xef, 0xd7, 0x7b, 0xb2, 0xcd, 0x03,
	0xd6, 0xce, 0xae, 0xf7, 0x05, 0xcc, 0xd9, 0xcf, 0xed, 0xc9, 0xba, 0x1f, 0x7b, 0x96, 0xd1, 0x72,
	0x63, 0x1d, 0xe5, 0x01, 0x0a, 0xc1, 0x45, 0x53, 0x20, 0x8d, 0xec, 0x2d, 0x52, 0x72, 0xcb, 0x5a,
	0xe6, 0x6a, 0x91, 0x8a, 0xa0, 0x51, 0xf1, 0xb8, 0x8f, 0x3a, 0x18, 0x53, 0x6e, 0x49, 0x4b, 0x76,
	0xb8, 0x8f, 0xce, 0x27, 0x20, 0x75, 0x93, 0x83, 0x59, 0x37, 0xd2, 0x15, 0x17, 0x07, 0x56, 0xfc,
	0x1c, 0x96, 0x04, 0x46, 0xbc, 0x73, 0x89, 0x4d, 0x1f, 0xa9, 0xdf, 0x09, 0x98, 0xa9, 0x7a, 0xd3,
	0xee, 0xa2, 0x95, 0xef, 0x5a, 0xb1, 0xda, 0xf5, 0x06, 0x46, 0x51, 0xc0, 0x99, 0xd9, 0xf5, 0xc8,
	0x0c, 0x32, 0xdb, 0x68, 0x25, 0x07, 0xbe, 0xf3, 0xaf, 0x22, 0x6c, 0xee, 0x08, 0xa4, 0x12, 0xb7,
	0xc3, 0xd0, 0x7e, 0x55, 0x67, 0x3f, 0x06, 0x42, 0xf6, 0x68, 0x67, 0xc7, 0xe6, 0x7d, 0x9c, 0x7f,
	0x1b, 0x50, 0x49, 0x4a, 0x44, 0x2b, 0x60, 0x71, 0x81, 0x8a, 0x65, 0x6f, 0x02, 0x46, 0xbe, 0x87,
	0x95, 0x44, 0xc5, 0xe3, 0x2c, 0x92, 0xa2, 0xe7, 0x49, 0x1e, 0x1f, 0x92, 0xfb, 0xf1, 0xdc, 0x4e,
	0x3a, 0x45, 0x56, 0x60, 0x86, 0x71, 0x55, 0xef, 0xa6, 0xf4, 0x72, 0xcc, 0x40, 0xd5, 0x8d, 0xa4,
	0x74, 0xc5, 0x79, 0x30, 0xad, 0x15, 0x16, 0x6c, 0xe5, 0x3a, 0x36, 0x52, 0xe7, 0x9f, 0x45, 0x78,
	0x3e, 0xba, 0x84, 0xb8, 0xae, 0x0d, 0xaf, 0x61, 0x5c, 0x99, 0x2b, 0x8e, 0x2f, 0x73, 0x89, 0x63,
	0x5f, 0x5c, 0xe5, 0xd8, 0xd4, 0x38, 0xc7, 0x54, 0xab, 0x16, 0x52, 0x21, 0x03, 0x2f, 0x08, 0x29,
	0x93, 0xaa, 0xec, 0x4d, 0xa9, 0xd6, 0x26, 0x2b, 0x73, 0xde, 0x42, 0x79, 0x37, 0x88, 0xc2, 0x9e,
	0xc4, 0x38, 0xe9, 0x26, 0xec, 0x96, 0xba, 0x4b, 0x23, 0xbc, 0x68, 0xb2, 0x5e, 0xd7, 0xfa, 0x34,
	0x1b, 0xe1, 0xc5, 0xc7, 0x5e, 0xd7, 0xa9, 0x43, 0xb5, 0x11, 0xb4, 0x59, 0x7c, 0xae, 0xd5, 0x65,
	0x80, 0x99, 0x86, 0x72, 0x12, 0xe6, 0x0a, 0xcc, 0xa8, 0xcc, 0x30, 0xab, 0xac, 0xb8, 0x66, 0xe0,
	0xbc, 0x82, 0xb2, 0x02, 0x44, 0x5f, 0x43, 0xa9, 0x9d, 0x8f, 0xf4, 0xb0, 0x69, 0x74, 0x8b, 0x5a,
	0xb7, 0x1c, 0xa5, 0x2a, 0x4e, 0x0d, 0xa6, 0x77, 0xa9, 0xa4, 0x84, 0xc0, 0xb4, 0x4f, 0x25, 0xb5,
	0x2a, 0xfa, 0xb7, 0xf3, 0x1c, 0x4a, 0x0a, 0x8d, 0xca, 0x9e, 0x40, 0xb2, 0x0a, 0xa5, 0x28, 0x1e,
	0x58, 0xad, 0x54, 0xe0, 0xd4, 0x81, 0xfc, 0x48, 0x3b, 0x81, 0xaf, 0xb6, 0xd3, 0x3b, 0xbf, 0xe6,
	0x1a, 0x6a, 0x70, 0x0f, 0xd9, 0x25, 0x76, 0x78, 0x18, 0x2f, 0x23, 0x19, 0x3b, 0x1b, 0x50, 0x7a,
	0xc3, 0x79, 0xe7, 0x47, 0xda, 0xe9, 0xa1, 0x5a, 0xec, 0xa5, 0xfa, 0x61, 0x2f, 0x41, 0x33, 0x70,
	0x7e, 0x82, 0xc7, 0x47, 0x82, 0x7b, 0x18, 0x45, 0xae, 0x29, 0x55, 0xfe, 0x4d, 0x02, 0x38, 0xc9,
	0xf8, 0x09, 0xac, 0x8e, 0x47, 0xb6, 0xcd, 0xce, 0x53, 0x98, 0xf7, 0x51, 0x95, 0x87, 0xc1, 0xc0,
	0x56, 0xac, 0x30, 0x09, 0x7e, 0x28, 0x30, 0xa4, 0x42, 0x5d, 0xb5, 0xde, 0xb9, 0x35, 0x52, 0x8e,
	0x65, 0xdb, 0xde, 0xb9, 0xf3, 0x33, 0x7c, 0xd9, 0x40, 0x29, 0x3b, 0x99, 0x14, 0xb8, 0xa6, 0xf7,
	0x6b, 0x50, 0xd6, 0x96, 0x9b, 0xa1, 0xe0, 0xfc, 0xc4, 0x62, 0x83, 0x16, 0x1d, 0x29, 0x89, 0xe3,
	0xc3, 0xfa, 0x30, 0xf4, 0x9b, 0xbe, 0x3d, 0xe2, 0xd7, 0xb4, 0xb1, 0x01, 0x15, 0x2e, 0xa8, 0xd7,
	0x19, 0x34, 0x52, 0x36, 0x32, 0x63, 0xe5, 0xef, 0x45, 0x78, 0x3a, 0x6a, 0xe6, 0x80, 0x5d, 0xaa,
	0xb3, 0x10, 0xc8, 0xfe, 0x9d, 0x59, 0x22, 0xaf, 0x54, 0x85, 0xca, 0x1e, 0x66, 0xab, 0x6a, 0xfa,
	0x17, 0x12, 0xcf, 0x35, 0xd2, 0x08, 0x3c, 0x85, 0xb9, 0xb8, 0x24, 0x54, 0x61, 0x6e, 0xb0, 0x68,
	0xc4, 0x43, 0xe7, 0x4f, 0xf0, 0x8d, 0x6a, 0x66, 0x39, 0xef, 0x20, 0x65, 0xb6, 0xad, 0xd9, 0xe3,
	0xe2, 0xc6, 0xfb, 0xb1, 0x02, 0x33, 0x17, 0x3d, 0x14, 0xfd, 0x38, 0x1d, 0xf5, 0xc0, 0x79, 0x07,
	0x0b, 0x83, 0xd0, 0x2a, 0x8b, 0x92, 0x06, 0x2c, 0x61, 0x89, 0xb1, 0x40, 0xf9, 0x69, 0x3b, 0x2e,
	0xcb, 0xda, 0xe2, 0xa1, 0xf3, 0x13, 0xac, 0x6d, 0x87, 0x61, 0xa7, 0xbf, 0xad, 0xfb, 0x95, 0xdb,
	0x78, 0xa8, 0x6e, 0x28, 0x2f, 0x61, 0x4e, 0x15, 0xd7, 0x8e, 0x54, 0xc9, 0x78, 0xa3, 0x1a, 0xf0,
	0x8f, 0xbd, 0x6e, 0x0b, 0x85, 0xda, 0x0a, 0x43, 0xb4, 0x98, 0x1e, 0x6b, 0x9c, 0x69, 0xb7, 0xdc,
	0x4a, 0x55, 0x9c, 0x6f, 0x61, 0x29, 0xb5, 0x6e, 0x1a, 0xd8, 0xcc, 0xb5, 0x5d, 0x1c, 0xb8, 0xb6,
	0xeb, 0xb0, 0xba, 0x8f, 0x52, 0xef, 0xca, 0x6d, 0x9c, 0x5e, 0x82, 0xa9, 0x73, 0xec, 0x5b, 0xae,
	0xa7, 0x7e, 0x3a, 0xcf, 0x60, 0x71, 0xd0, 0x38, 0xa6, 0xa5, 0xb0, 0x98, 0x2d, 0x85, 0xdf, 0x0d,
	0x78, 0xa9, 0xeb, 0x6d, 0xb6, 0x10, 0x17, 0x07, 0x0a, 0xf1, 0x01, 0xcc, 0x37, 0x50, 0x1e, 0x46,
	0xed, 0x5d, 0xc1, 0x43, 0x17, 0x2f, 0xc8, 0x63, 0x28, 0xf9, 0x82, 0x87, 0x4d, 0x81, 0xde, 0xa5,
	0xdd, 0xa7, 0x7b, 0xbe, 0x9e, 0xf3, 0x2e, 0x93, 0x49, 0xd5, 0x3b, 0xd9, 0x8d, 0xd2, 0x93, 0xaa,
	0x0d, 0x76, 0x9e, 0xc1, 0xbc, 0x6d, 0x0c, 0x26, 0x87, 0xe6, 0xf5, 0x7f, 0xd6, 0x61, 0xf6, 0x13,
	0xb6, 0xb6, 0xc3, 0x80, 0x7c, 0x84, 0xf9, 0x01, 0xe6, 0x4f, 0x56, 0xe3, 0x26, 0x66, 0xdc, 0x5b,
	0x43, 0xed, 0x49, 0xce, 0xac, 0xa9, 0x4e, 0x4e, 0x81, 0xec, 0xeb, 0xe5, 0xa4, 0xcc, 0x3b, 0xc5,
	0x1b, 0x47, 0xc8, 0x6b, 0x0f, 0x47, 0x7a, 0xd1, 0xb7, 0xdd, 0x50, 0xf6, 0x9d, 0x02, 0xf9, 0x00,
	0x64, 0x94, 0x4e, 0x93, 0x8d, 0x18, 0x2d, 0x97, 0x6a, 0xd7, 0xd2, 0x2e, 0x39, 0x66, 0xc1, 0x4e,
	0x81, 0xfc, 0x01, 0xe6, 0x2c, 0x05, 0x25, 0xeb, 0xf1, 0x7c, 0x1e, 0xf3, 0xad, 0xad, 0xe6, 0x6a,
	0xbc, 0xe7, 0x2d, 0xa7, 0x40, 0x7e, 0x80, 0xe5, 0x43, 0xce, 0x02, 0xc9, 0x85, 0x55, 0x50, 0x64,
	0x76, 0xe2, 0x47, 0x57, 0x42, 0x7e, 0x82, 0xfb, 0x3b, 0x9c, 0x87, 0x28, 0xa8, 0x0c, 0x2e, 0x31,
	0x9e, 0xbb, 0x03, 0x5f, 0xff, 0x0c, 0x4f, 0xac, 0xaf, 0x63, 0xf0, 0x7f, 0xbd, 0xdf, 0xbf, 0x01,
	0x48, 0x19, 0x39, 0x19, 0x6d, 0xcd, 0x6b, 0xb5, 0xcc, 0x81, 0x19, 0x22, 0xee, 0x4e, 0x81, 0x7c,
	0xd4, 0x84, 0x7e, 0x88, 0x41, 0xa7, 0x9b, 0x9c, 0xcb, 0xae, 0x6b, 0x49, 0xab, 0x9d, 0x99, 0x73,
	0x0a, 0xe4, 0x18, 0x1e, 0x8e, 0x27, 0x84, 0xe4, 0x9b, 0xf4, 0x18, 0x4e, 0x20, 0x8c, 0xe9, 0xe1,
	0x49, 0x58, 0x90, 0x3e, 0x8a, 0x8f, 0x1a, 0xbd, 0x56, 0xe4, 0x89, 0xa0, 0x85, 0x07, 0xcc, 0xe3,
	0xdd, 0x94, 0x08, 0x44, 0x24, 0xe7, 0x04, 0xd7, 0xc6, 0x91, 0x01, 0xa7, 0xf0, 0xaa, 0x48, 0x8e,
	0x33, 0x68, 0x43, 0xb4, 0x22, 0x1f, 0xed, 0x71, 0x72, 0xee, 0x47, 0x89, 0x88, 0x46, 0xdd, 0x83,
	0xea, 0x3e, 0xca, 0x21, 0xef, 0x6c, 0x19, 0x18, 0x5d, 0x54, 0xed, 0xc1, 0x90, 0xc8, 0x3e, 0x06,
	0x14, 0x2c, 0xce, 0x90, 0x95, 0x5b, 0xe0, 0xbc, 0x85, 0x87, 0x3b, 0x9c, 0x9d, 0x04, 0xa2, 0x3b,
	0x84, 0x35, 0x0e, 0x25, 0xbf, 0x0a, 0xec, 0xc2, 0x03, 0x17, 0xcf, 0xd0, 0x1b, 0x5e, 0xd9, 0xcd,
	0x50, 0x1a, 0xf0, 0xb5, 0x69, 0x15, 0x2c, 0x7d, 0x72, 0x0d, 0xff, 0xf1, 0x7f, 0x15, 0xe8, 0x07,
	0x78, 0x62, 0x71, 0x86, 0x60, 0xac, 0x91, 0x9b, 0xa1, 0xbd, 0xd3, 0x2f, 0xb0, 0x63, 0xe8, 0xdd,
	0x18, 0x94, 0x24, 0xa7, 0x46, 0xd5, 0x9d, 0x02, 0x39, 0x84, 0xaf, 0xe2, 0xc8, 0x0f, 0xae, 0x36,
	0x39, 0x64, 0x63, 0xd2, 0x74, 0xe2, 0x0e, 0x98, 0xd8, 0xbd, 0xfd, 0x25, 0x0c, 0xc4, 0x6d, 0x51,
	0x3e, 0xc0, 0xc2, 0x01, 0x93, 0xc8, 0xfc, 0x1b, 0x94, 0xb6, 0x7c, 0xb4, 0xdf, 0xc2, 0xa2, 0x5d,
	0x62, 0x02, 0x77, 0x23, 0x6f, 0x0e, 0xa0, 0x66, 0xbc, 0x31, 0x2b, 0x1b, 0xba, 0x63, 0x6e, 0x04,
	0xf5, 0x1e, 0x1e, 0x5b, 0x57, 0x7e, 0x3d, 0x56, 0x03, 0x9e, 0xa9, 0x8e, 0x45, 0xe3, 0x24, 0x6f,
	0x62, 0xaa, 0x71, 0xde, 0xe3, 0xe2, 0x6a, 0xdc, 0xa4, 0xe0, 0x64, 0x7a, 0x2a, 0x5d, 0x62, 0xd7,
	0x1a, 0x7d, 0xe6, 0x0d, 0x1e, 0x15, 0x0b, 0x33, 0x9c, 0xd7, 0xd7, 0x71, 0xf2, 0x2d, 0x2c, 0x2b,
	0x3c, 0xdd, 0xff, 0xa8, 0xe8, 0xab, 0x02, 0x9d, 0x5b, 0xb6, 0xf2, 0x61, 0xce, 0x60, 0xe3, 0xca,
	0x57, 0x04, 0xf2, 0x2a, 0xb9, 0xca, 0xaf, 0xf9, 0xe0, 0x90, 0xd6, 0xef, 0xe4, 0x3d, 0xc3, 0x29,
	0x90, 0x0e, 0x38, 0x57, 0xd3, 0x7d, 0xf2, 0x7d, 0xbe, 0xb1, 0x9c, 0xa7, 0x81, 0xf1, 0xd6, 0xde,
	0x41, 0x2d, 0xa9, 0xef, 0x29, 0x88, 0xe5, 0xec, 0x64, 0xf4, 0x93, 0x74, 0xe3, 0x32, 0xbc, 0x5e,
	0xd7, 0xf4, 0x0f, 0xb0, 0x3c, 0xc2, 0xd1, 0xd3, 0xbc, 0xc9, 0xa3, 0xef, 0x29, 0x5e, 0x86, 0x8f,
	0xeb, 0xa4, 0x29, 0x67, 0x78, 0x32, 0x49, 0x8a, 0xc8, 0x28, 0x79, 0x4e, 0xd7, 0x95, 0xf0, 0x60,
	0xa7, 0x40, 0x5e, 0xc0, 0x3d, 0x05, 0xa8, 0x29, 0x7b, 0x25, 0x71, 0x99, 0x4a, 0x9a, 0x09, 0x43,
	0x42, 0xca, 0x0b, 0xc4, 0x83, 0x95, 0x71, 0x44, 0x96, 0x3c, 0x4d, 0xea, 0x59, 0x3e, 0x81, 0xae,
	0x7d, 0x3d, 0x59, 0x29, 0xe9, 0x1f, 0x0e, 0x61, 0x69, 0x98, 0x03, 0x92, 0xb5, 0x4c, 0xc3, 0x39,
	0x8e, 0xdf, 0x4e, 0x38, 0x94, 0x2d, 0x58, 0x1d, 0xa5, 0x94, 0x8d, 0xa0, 0x1d, 0xbf, 0xcf, 0x6c,
	0xe6, 0x41, 0x0f, 0xf3, 0xdb, 0x09, 0x36, 0x3c, 0x78, 0x32, 0xfa, 0xf5, 0x21, 0xbf, 0xc4, 0xbb,
	0x34, 0x72, 0x32, 0xce, 0x88, 0xe5, 0xc6, 0xc7, 0x3d, 0xc1, 0xc8, 0x77, 0xf9, 0x46, 0x46, 0x28,
	0xf4, 0x04, 0x3b, 0x6d, 0xf8, 0x2a, 0x17, 0xc0, 0x6c, 0xf7, 0x1d, 0x19, 0xfa, 0x1d, 0x2c, 0x29,
	0xf2, 0x90, 0x4d, 0xcb, 0x71, 0xa9, 0x94, 0x0f, 0xb0, 0x0f, 0x6b, 0xfb, 0x8a, 0x80, 0x98, 0x44,
	0xb6, 0xec, 0x7c, 0x80, 0x17, 0x8e, 0xc3, 0x5b, 0x8c, 0x45, 0xf1, 0x1f, 0x30, 0x05, 0x12, 0xc0,
	0x57, 0x93, 0x69, 0x3b, 0x79, 0x91, 0x6d, 0x79, 0xaf, 0xa4, 0xf7, 0xb5, 0x87, 0xd9, 0x64, 0x4b,
	0x75, 0x75, 0xef, 0x5e, 0xcd, 0x63, 0xde, 0xe4, 0x59, 0xe2, 0xd9, 0x64, 0x6e, 0x3e, 0xb9, 0x2b,
	0x8a, 0x6f, 0x99, 0x3a, 0x33, 0x08, 0xf6, 0x80, 0x5d, 0x19, 0x97, 0x7c, 0xd0, 0x3a, 0x3c, 0xcd,
	0xbd, 0xc3, 0x26, 0x63, 0xe6, 0xdc, 0x5f, 0xef, 0x75, 0xbc, 0x8d, 0x7b, 0xf1, 0x83, 0xf5, 0x6d,
	0xb1, 0xf6, 0xe1, 0xa1, 0x7d, 0x12, 0xe8, 0x5d, 0xbd, 0xf7, 0xd5, 0x4c, 0x84, 0x07, 0x5e, 0x1c,
	0x9c, 0x02, 0xf9, 0x49, 0x77, 0x6b, 0xa3, 0x6f, 0x0b, 0xe4, 0xeb, 0xcc, 0xde, 0xe7, 0x3e, 0x3d,
	0xd4, 0xbe, 0x1c, 0x0f, 0x8d, 0xa9, 0x8b, 0xfa, 0x6d, 0xe0, 0x56, 0x2e, 0x9a, 0x57, 0x05, 0x95,
	0x31, 0x0b, 0xea, 0xfc, 0x65, 0xde, 0x57, 0xae, 0x64, 0x2a, 0x83, 0xc1, 0xfa, 0x7d, 0xf6, 0x61,
	0x22, 0x44, 0x41, 0x1e, 0x64, 0x52, 0x39, 0x7d, 0xaf, 0xc8, 0x3f, 0x0b, 0x6f, 0x5e, 0xfc, 0xf1,
	0xbb, 0x76, 0x20, 0x4f, 0x7b, 0xad, 0x2d, 0x8f, 0x77, 0x5f, 0x7a, 0xd8, 0x41, 0xf1, 0x82, 0xa1,
	0xfc, 0xcc, 0xc5, 0xf9, 0xcb, 0x36, 0xdf, 0x51, 0xe3, 0x97, 0x9f, 0xb1, 0x45, 0xc3, 0xe0, 0xa5,
	0x08, 0xbd, 0xd6, 0xac, 0x06, 0xf8, 0xff, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x2f, 0xf9, 0xae,
	0xee, 0x54, 0x21, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WebApiClient is the client API for WebApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebApiClient interface {
	GetPayHistory(ctx context.Context, in *GetPayHistoryRequest, opts ...grpc.CallOption) (*GetPayHistoryResponse, error)
	SetDelegation(ctx context.Context, in *SetDelegationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	OpenPaymentChannel(ctx context.Context, in *OpenPaymentChannelRequest, opts ...grpc.CallOption) (*ChannelID, error)
	Deposit(ctx context.Context, in *DepositOrWithdrawRequest, opts ...grpc.CallOption) (*DepositOrWithdrawJob, error)
	MonitorDepositJob(ctx context.Context, in *DepositOrWithdrawJob, opts ...grpc.CallOption) (*DepositOrWithdrawJob, error)
	CooperativeWithdraw(ctx context.Context, in *DepositOrWithdrawRequest, opts ...grpc.CallOption) (*DepositOrWithdrawJob, error)
	MonitorCooperativeWithdrawJob(ctx context.Context, in *DepositOrWithdrawJob, opts ...grpc.CallOption) (*DepositOrWithdrawJob, error)
	GetBalance(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	GetPeerFreeBalance(ctx context.Context, in *GetPeerFreeBalanceRequest, opts ...grpc.CallOption) (*FreeBalance, error)
	SendConditionalPayment(ctx context.Context, in *SendConditionalPaymentRequest, opts ...grpc.CallOption) (*PaymentID, error)
	SubscribeIncomingPayments(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (WebApi_SubscribeIncomingPaymentsClient, error)
	// TODO(mzhou): Refine the outgoing payment API.
	SubscribeOutgoingPayments(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (WebApi_SubscribeOutgoingPaymentsClient, error)
	GetIncomingPaymentStatus(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*PaymentStatus, error)
	GetOutgoingPaymentStatus(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*PaymentStatus, error)
	ConfirmOutgoingPayment(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*empty.Empty, error)
	RejectIncomingPayment(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*empty.Empty, error)
	SettleOnChainResolvedIncomingPayment(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*empty.Empty, error)
	ResolveIncomingPaymentOnChain(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*empty.Empty, error)
	GetOnChainPaymentInfo(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*OnChainPaymentInfo, error)
	// TODO(mzhou): Consider removing the following two APIs
	ConfirmOnChainResolvedPayments(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*empty.Empty, error)
	SettleExpiredPayments(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*empty.Empty, error)
	IntendWithdraw(ctx context.Context, in *DepositOrWithdrawRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ConfirmWithdraw(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*empty.Empty, error)
	IntendSettlePaymentChannel(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*empty.Empty, error)
	ConfirmSettlePaymentChannel(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*empty.Empty, error)
	GetSettleFinalizedTimeForPaymentChannel(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BlockNumber, error)
	SyncOnChainPaymentChannelStatus(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*empty.Empty, error)
	SyncStateWithPeer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	CreateAppSessionOnVirtualContract(ctx context.Context, in *CreateAppSessionOnVirtualContractRequest, opts ...grpc.CallOption) (*SessionID, error)
	CreateAppSessionOnDeployedContract(ctx context.Context, in *CreateAppSessionOnDeployedContractRequest, opts ...grpc.CallOption) (*SessionID, error)
	SubscribeAppSessionDispute(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (WebApi_SubscribeAppSessionDisputeClient, error)
	SignOutgoingState(ctx context.Context, in *SignOutgoingStateRequest, opts ...grpc.CallOption) (*SignedState, error)
	ValidateAck(ctx context.Context, in *ValidateAckRequest, opts ...grpc.CallOption) (*BoolValue, error)
	SignData(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Signature, error)
	ProcessReceivedState(ctx context.Context, in *ProcessReceivedStateRequest, opts ...grpc.CallOption) (*ProcessReceivedStateResponse, error)
	SettleAppSession(ctx context.Context, in *SettleAppSessionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SettleAppSessionBySigTimeout(ctx context.Context, in *SettleAppSessionByTimeoutRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SettleAppSessionByMoveTimeout(ctx context.Context, in *SettleAppSessionByTimeoutRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SettleAppSessionByInvalidTurn(ctx context.Context, in *SettleAppSessionByInvalidityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SettleAppSessionByInvalidState(ctx context.Context, in *SettleAppSessionByInvalidityRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DeleteAppSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*empty.Empty, error)
	GetDeployedAddressForAppSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*Address, error)
	GetBooleanOutcomeForAppSession(ctx context.Context, in *GetBooleanOutcomeForAppSessionRequest, opts ...grpc.CallOption) (*BooleanOutcome, error)
	ApplyActionForAppSession(ctx context.Context, in *ApplyActionForAppSessionRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	FinalizeOnActionTimeoutForAppSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*empty.Empty, error)
	GetSettleFinalizedTimeForAppSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*BlockNumber, error)
	GetActionDeadlineForAppSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*BlockNumber, error)
	GetStatusForAppSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*AppSessionStatus, error)
	GetStateForAppSession(ctx context.Context, in *GetStateForAppSessionRequest, opts ...grpc.CallOption) (*AppSessionState, error)
	GetSeqNumForAppSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*AppSessionSeqNum, error)
	GetBlockNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BlockNumber, error)
	SetMsgDropper(ctx context.Context, in *SetMsgDropReq, opts ...grpc.CallOption) (*empty.Empty, error)
}

type webApiClient struct {
	cc *grpc.ClientConn
}

func NewWebApiClient(cc *grpc.ClientConn) WebApiClient {
	return &webApiClient{cc}
}

func (c *webApiClient) GetPayHistory(ctx context.Context, in *GetPayHistoryRequest, opts ...grpc.CallOption) (*GetPayHistoryResponse, error) {
	out := new(GetPayHistoryResponse)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/GetPayHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SetDelegation(ctx context.Context, in *SetDelegationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/SetDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) OpenPaymentChannel(ctx context.Context, in *OpenPaymentChannelRequest, opts ...grpc.CallOption) (*ChannelID, error) {
	out := new(ChannelID)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/OpenPaymentChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) Deposit(ctx context.Context, in *DepositOrWithdrawRequest, opts ...grpc.CallOption) (*DepositOrWithdrawJob, error) {
	out := new(DepositOrWithdrawJob)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) MonitorDepositJob(ctx context.Context, in *DepositOrWithdrawJob, opts ...grpc.CallOption) (*DepositOrWithdrawJob, error) {
	out := new(DepositOrWithdrawJob)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/MonitorDepositJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) CooperativeWithdraw(ctx context.Context, in *DepositOrWithdrawRequest, opts ...grpc.CallOption) (*DepositOrWithdrawJob, error) {
	out := new(DepositOrWithdrawJob)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/CooperativeWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) MonitorCooperativeWithdrawJob(ctx context.Context, in *DepositOrWithdrawJob, opts ...grpc.CallOption) (*DepositOrWithdrawJob, error) {
	out := new(DepositOrWithdrawJob)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/MonitorCooperativeWithdrawJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetBalance(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetPeerFreeBalance(ctx context.Context, in *GetPeerFreeBalanceRequest, opts ...grpc.CallOption) (*FreeBalance, error) {
	out := new(FreeBalance)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/GetPeerFreeBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SendConditionalPayment(ctx context.Context, in *SendConditionalPaymentRequest, opts ...grpc.CallOption) (*PaymentID, error) {
	out := new(PaymentID)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/SendConditionalPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SubscribeIncomingPayments(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (WebApi_SubscribeIncomingPaymentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WebApi_serviceDesc.Streams[0], "/webrpc.WebApi/SubscribeIncomingPayments", opts...)
	if err != nil {
		return nil, err
	}
	x := &webApiSubscribeIncomingPaymentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WebApi_SubscribeIncomingPaymentsClient interface {
	Recv() (*PaymentInfo, error)
	grpc.ClientStream
}

type webApiSubscribeIncomingPaymentsClient struct {
	grpc.ClientStream
}

func (x *webApiSubscribeIncomingPaymentsClient) Recv() (*PaymentInfo, error) {
	m := new(PaymentInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webApiClient) SubscribeOutgoingPayments(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (WebApi_SubscribeOutgoingPaymentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WebApi_serviceDesc.Streams[1], "/webrpc.WebApi/SubscribeOutgoingPayments", opts...)
	if err != nil {
		return nil, err
	}
	x := &webApiSubscribeOutgoingPaymentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WebApi_SubscribeOutgoingPaymentsClient interface {
	Recv() (*OutgoingPaymentInfo, error)
	grpc.ClientStream
}

type webApiSubscribeOutgoingPaymentsClient struct {
	grpc.ClientStream
}

func (x *webApiSubscribeOutgoingPaymentsClient) Recv() (*OutgoingPaymentInfo, error) {
	m := new(OutgoingPaymentInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webApiClient) GetIncomingPaymentStatus(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*PaymentStatus, error) {
	out := new(PaymentStatus)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/GetIncomingPaymentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetOutgoingPaymentStatus(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*PaymentStatus, error) {
	out := new(PaymentStatus)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/GetOutgoingPaymentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) ConfirmOutgoingPayment(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/ConfirmOutgoingPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) RejectIncomingPayment(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/RejectIncomingPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SettleOnChainResolvedIncomingPayment(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/SettleOnChainResolvedIncomingPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) ResolveIncomingPaymentOnChain(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/ResolveIncomingPaymentOnChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetOnChainPaymentInfo(ctx context.Context, in *PaymentID, opts ...grpc.CallOption) (*OnChainPaymentInfo, error) {
	out := new(OnChainPaymentInfo)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/GetOnChainPaymentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) ConfirmOnChainResolvedPayments(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/ConfirmOnChainResolvedPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SettleExpiredPayments(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/SettleExpiredPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) IntendWithdraw(ctx context.Context, in *DepositOrWithdrawRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/IntendWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) ConfirmWithdraw(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/ConfirmWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) IntendSettlePaymentChannel(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/IntendSettlePaymentChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) ConfirmSettlePaymentChannel(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/ConfirmSettlePaymentChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetSettleFinalizedTimeForPaymentChannel(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*BlockNumber, error) {
	out := new(BlockNumber)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/GetSettleFinalizedTimeForPaymentChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SyncOnChainPaymentChannelStatus(ctx context.Context, in *TokenInfo, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/SyncOnChainPaymentChannelStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SyncStateWithPeer(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/SyncStateWithPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) CreateAppSessionOnVirtualContract(ctx context.Context, in *CreateAppSessionOnVirtualContractRequest, opts ...grpc.CallOption) (*SessionID, error) {
	out := new(SessionID)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/CreateAppSessionOnVirtualContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) CreateAppSessionOnDeployedContract(ctx context.Context, in *CreateAppSessionOnDeployedContractRequest, opts ...grpc.CallOption) (*SessionID, error) {
	out := new(SessionID)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/CreateAppSessionOnDeployedContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SubscribeAppSessionDispute(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (WebApi_SubscribeAppSessionDisputeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WebApi_serviceDesc.Streams[2], "/webrpc.WebApi/SubscribeAppSessionDispute", opts...)
	if err != nil {
		return nil, err
	}
	x := &webApiSubscribeAppSessionDisputeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WebApi_SubscribeAppSessionDisputeClient interface {
	Recv() (*DisputeInfo, error)
	grpc.ClientStream
}

type webApiSubscribeAppSessionDisputeClient struct {
	grpc.ClientStream
}

func (x *webApiSubscribeAppSessionDisputeClient) Recv() (*DisputeInfo, error) {
	m := new(DisputeInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *webApiClient) SignOutgoingState(ctx context.Context, in *SignOutgoingStateRequest, opts ...grpc.CallOption) (*SignedState, error) {
	out := new(SignedState)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/SignOutgoingState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) ValidateAck(ctx context.Context, in *ValidateAckRequest, opts ...grpc.CallOption) (*BoolValue, error) {
	out := new(BoolValue)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/ValidateAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SignData(ctx context.Context, in *Data, opts ...grpc.CallOption) (*Signature, error) {
	out := new(Signature)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/SignData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) ProcessReceivedState(ctx context.Context, in *ProcessReceivedStateRequest, opts ...grpc.CallOption) (*ProcessReceivedStateResponse, error) {
	out := new(ProcessReceivedStateResponse)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/ProcessReceivedState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SettleAppSession(ctx context.Context, in *SettleAppSessionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/SettleAppSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SettleAppSessionBySigTimeout(ctx context.Context, in *SettleAppSessionByTimeoutRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/SettleAppSessionBySigTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SettleAppSessionByMoveTimeout(ctx context.Context, in *SettleAppSessionByTimeoutRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/SettleAppSessionByMoveTimeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SettleAppSessionByInvalidTurn(ctx context.Context, in *SettleAppSessionByInvalidityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/SettleAppSessionByInvalidTurn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SettleAppSessionByInvalidState(ctx context.Context, in *SettleAppSessionByInvalidityRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/SettleAppSessionByInvalidState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) DeleteAppSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/DeleteAppSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetDeployedAddressForAppSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/GetDeployedAddressForAppSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetBooleanOutcomeForAppSession(ctx context.Context, in *GetBooleanOutcomeForAppSessionRequest, opts ...grpc.CallOption) (*BooleanOutcome, error) {
	out := new(BooleanOutcome)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/GetBooleanOutcomeForAppSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) ApplyActionForAppSession(ctx context.Context, in *ApplyActionForAppSessionRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/ApplyActionForAppSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) FinalizeOnActionTimeoutForAppSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/FinalizeOnActionTimeoutForAppSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetSettleFinalizedTimeForAppSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*BlockNumber, error) {
	out := new(BlockNumber)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/GetSettleFinalizedTimeForAppSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetActionDeadlineForAppSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*BlockNumber, error) {
	out := new(BlockNumber)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/GetActionDeadlineForAppSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetStatusForAppSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*AppSessionStatus, error) {
	out := new(AppSessionStatus)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/GetStatusForAppSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetStateForAppSession(ctx context.Context, in *GetStateForAppSessionRequest, opts ...grpc.CallOption) (*AppSessionState, error) {
	out := new(AppSessionState)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/GetStateForAppSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetSeqNumForAppSession(ctx context.Context, in *SessionID, opts ...grpc.CallOption) (*AppSessionSeqNum, error) {
	out := new(AppSessionSeqNum)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/GetSeqNumForAppSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) GetBlockNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BlockNumber, error) {
	out := new(BlockNumber)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/GetBlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webApiClient) SetMsgDropper(ctx context.Context, in *SetMsgDropReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webrpc.WebApi/SetMsgDropper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebApiServer is the server API for WebApi service.
type WebApiServer interface {
	GetPayHistory(context.Context, *GetPayHistoryRequest) (*GetPayHistoryResponse, error)
	SetDelegation(context.Context, *SetDelegationRequest) (*empty.Empty, error)
	OpenPaymentChannel(context.Context, *OpenPaymentChannelRequest) (*ChannelID, error)
	Deposit(context.Context, *DepositOrWithdrawRequest) (*DepositOrWithdrawJob, error)
	MonitorDepositJob(context.Context, *DepositOrWithdrawJob) (*DepositOrWithdrawJob, error)
	CooperativeWithdraw(context.Context, *DepositOrWithdrawRequest) (*DepositOrWithdrawJob, error)
	MonitorCooperativeWithdrawJob(context.Context, *DepositOrWithdrawJob) (*DepositOrWithdrawJob, error)
	GetBalance(context.Context, *TokenInfo) (*GetBalanceResponse, error)
	GetPeerFreeBalance(context.Context, *GetPeerFreeBalanceRequest) (*FreeBalance, error)
	SendConditionalPayment(context.Context, *SendConditionalPaymentRequest) (*PaymentID, error)
	SubscribeIncomingPayments(*empty.Empty, WebApi_SubscribeIncomingPaymentsServer) error
	// TODO(mzhou): Refine the outgoing payment API.
	SubscribeOutgoingPayments(*empty.Empty, WebApi_SubscribeOutgoingPaymentsServer) error
	GetIncomingPaymentStatus(context.Context, *PaymentID) (*PaymentStatus, error)
	GetOutgoingPaymentStatus(context.Context, *PaymentID) (*PaymentStatus, error)
	ConfirmOutgoingPayment(context.Context, *PaymentID) (*empty.Empty, error)
	RejectIncomingPayment(context.Context, *PaymentID) (*empty.Empty, error)
	SettleOnChainResolvedIncomingPayment(context.Context, *PaymentID) (*empty.Empty, error)
	ResolveIncomingPaymentOnChain(context.Context, *PaymentID) (*empty.Empty, error)
	GetOnChainPaymentInfo(context.Context, *PaymentID) (*OnChainPaymentInfo, error)
	// TODO(mzhou): Consider removing the following two APIs
	ConfirmOnChainResolvedPayments(context.Context, *TokenInfo) (*empty.Empty, error)
	SettleExpiredPayments(context.Context, *TokenInfo) (*empty.Empty, error)
	IntendWithdraw(context.Context, *DepositOrWithdrawRequest) (*empty.Empty, error)
	ConfirmWithdraw(context.Context, *TokenInfo) (*empty.Empty, error)
	IntendSettlePaymentChannel(context.Context, *TokenInfo) (*empty.Empty, error)
	ConfirmSettlePaymentChannel(context.Context, *TokenInfo) (*empty.Empty, error)
	GetSettleFinalizedTimeForPaymentChannel(context.Context, *TokenInfo) (*BlockNumber, error)
	SyncOnChainPaymentChannelStatus(context.Context, *TokenInfo) (*empty.Empty, error)
	SyncStateWithPeer(context.Context, *empty.Empty) (*empty.Empty, error)
	CreateAppSessionOnVirtualContract(context.Context, *CreateAppSessionOnVirtualContractRequest) (*SessionID, error)
	CreateAppSessionOnDeployedContract(context.Context, *CreateAppSessionOnDeployedContractRequest) (*SessionID, error)
	SubscribeAppSessionDispute(*SessionID, WebApi_SubscribeAppSessionDisputeServer) error
	SignOutgoingState(context.Context, *SignOutgoingStateRequest) (*SignedState, error)
	ValidateAck(context.Context, *ValidateAckRequest) (*BoolValue, error)
	SignData(context.Context, *Data) (*Signature, error)
	ProcessReceivedState(context.Context, *ProcessReceivedStateRequest) (*ProcessReceivedStateResponse, error)
	SettleAppSession(context.Context, *SettleAppSessionRequest) (*empty.Empty, error)
	SettleAppSessionBySigTimeout(context.Context, *SettleAppSessionByTimeoutRequest) (*empty.Empty, error)
	SettleAppSessionByMoveTimeout(context.Context, *SettleAppSessionByTimeoutRequest) (*empty.Empty, error)
	SettleAppSessionByInvalidTurn(context.Context, *SettleAppSessionByInvalidityRequest) (*empty.Empty, error)
	SettleAppSessionByInvalidState(context.Context, *SettleAppSessionByInvalidityRequest) (*empty.Empty, error)
	DeleteAppSession(context.Context, *SessionID) (*empty.Empty, error)
	GetDeployedAddressForAppSession(context.Context, *SessionID) (*Address, error)
	GetBooleanOutcomeForAppSession(context.Context, *GetBooleanOutcomeForAppSessionRequest) (*BooleanOutcome, error)
	ApplyActionForAppSession(context.Context, *ApplyActionForAppSessionRequest) (*empty.Empty, error)
	FinalizeOnActionTimeoutForAppSession(context.Context, *SessionID) (*empty.Empty, error)
	GetSettleFinalizedTimeForAppSession(context.Context, *SessionID) (*BlockNumber, error)
	GetActionDeadlineForAppSession(context.Context, *SessionID) (*BlockNumber, error)
	GetStatusForAppSession(context.Context, *SessionID) (*AppSessionStatus, error)
	GetStateForAppSession(context.Context, *GetStateForAppSessionRequest) (*AppSessionState, error)
	GetSeqNumForAppSession(context.Context, *SessionID) (*AppSessionSeqNum, error)
	GetBlockNumber(context.Context, *empty.Empty) (*BlockNumber, error)
	SetMsgDropper(context.Context, *SetMsgDropReq) (*empty.Empty, error)
}

func RegisterWebApiServer(s *grpc.Server, srv WebApiServer) {
	s.RegisterService(&_WebApi_serviceDesc, srv)
}

func _WebApi_GetPayHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetPayHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/GetPayHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetPayHistory(ctx, req.(*GetPayHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SetDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SetDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/SetDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SetDelegation(ctx, req.(*SetDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_OpenPaymentChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenPaymentChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).OpenPaymentChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/OpenPaymentChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).OpenPaymentChannel(ctx, req.(*OpenPaymentChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositOrWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).Deposit(ctx, req.(*DepositOrWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_MonitorDepositJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositOrWithdrawJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).MonitorDepositJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/MonitorDepositJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).MonitorDepositJob(ctx, req.(*DepositOrWithdrawJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_CooperativeWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositOrWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).CooperativeWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/CooperativeWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).CooperativeWithdraw(ctx, req.(*DepositOrWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_MonitorCooperativeWithdrawJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositOrWithdrawJob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).MonitorCooperativeWithdrawJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/MonitorCooperativeWithdrawJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).MonitorCooperativeWithdrawJob(ctx, req.(*DepositOrWithdrawJob))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetBalance(ctx, req.(*TokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetPeerFreeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeerFreeBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetPeerFreeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/GetPeerFreeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetPeerFreeBalance(ctx, req.(*GetPeerFreeBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SendConditionalPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendConditionalPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SendConditionalPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/SendConditionalPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SendConditionalPayment(ctx, req.(*SendConditionalPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SubscribeIncomingPayments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebApiServer).SubscribeIncomingPayments(m, &webApiSubscribeIncomingPaymentsServer{stream})
}

type WebApi_SubscribeIncomingPaymentsServer interface {
	Send(*PaymentInfo) error
	grpc.ServerStream
}

type webApiSubscribeIncomingPaymentsServer struct {
	grpc.ServerStream
}

func (x *webApiSubscribeIncomingPaymentsServer) Send(m *PaymentInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _WebApi_SubscribeOutgoingPayments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebApiServer).SubscribeOutgoingPayments(m, &webApiSubscribeOutgoingPaymentsServer{stream})
}

type WebApi_SubscribeOutgoingPaymentsServer interface {
	Send(*OutgoingPaymentInfo) error
	grpc.ServerStream
}

type webApiSubscribeOutgoingPaymentsServer struct {
	grpc.ServerStream
}

func (x *webApiSubscribeOutgoingPaymentsServer) Send(m *OutgoingPaymentInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _WebApi_GetIncomingPaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetIncomingPaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/GetIncomingPaymentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetIncomingPaymentStatus(ctx, req.(*PaymentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetOutgoingPaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetOutgoingPaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/GetOutgoingPaymentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetOutgoingPaymentStatus(ctx, req.(*PaymentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_ConfirmOutgoingPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).ConfirmOutgoingPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/ConfirmOutgoingPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).ConfirmOutgoingPayment(ctx, req.(*PaymentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_RejectIncomingPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).RejectIncomingPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/RejectIncomingPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).RejectIncomingPayment(ctx, req.(*PaymentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SettleOnChainResolvedIncomingPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SettleOnChainResolvedIncomingPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/SettleOnChainResolvedIncomingPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SettleOnChainResolvedIncomingPayment(ctx, req.(*PaymentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_ResolveIncomingPaymentOnChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).ResolveIncomingPaymentOnChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/ResolveIncomingPaymentOnChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).ResolveIncomingPaymentOnChain(ctx, req.(*PaymentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetOnChainPaymentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetOnChainPaymentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/GetOnChainPaymentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetOnChainPaymentInfo(ctx, req.(*PaymentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_ConfirmOnChainResolvedPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).ConfirmOnChainResolvedPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/ConfirmOnChainResolvedPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).ConfirmOnChainResolvedPayments(ctx, req.(*TokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SettleExpiredPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SettleExpiredPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/SettleExpiredPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SettleExpiredPayments(ctx, req.(*TokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_IntendWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositOrWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).IntendWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/IntendWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).IntendWithdraw(ctx, req.(*DepositOrWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_ConfirmWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).ConfirmWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/ConfirmWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).ConfirmWithdraw(ctx, req.(*TokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_IntendSettlePaymentChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).IntendSettlePaymentChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/IntendSettlePaymentChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).IntendSettlePaymentChannel(ctx, req.(*TokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_ConfirmSettlePaymentChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).ConfirmSettlePaymentChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/ConfirmSettlePaymentChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).ConfirmSettlePaymentChannel(ctx, req.(*TokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetSettleFinalizedTimeForPaymentChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetSettleFinalizedTimeForPaymentChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/GetSettleFinalizedTimeForPaymentChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetSettleFinalizedTimeForPaymentChannel(ctx, req.(*TokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SyncOnChainPaymentChannelStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SyncOnChainPaymentChannelStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/SyncOnChainPaymentChannelStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SyncOnChainPaymentChannelStatus(ctx, req.(*TokenInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SyncStateWithPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SyncStateWithPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/SyncStateWithPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SyncStateWithPeer(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_CreateAppSessionOnVirtualContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppSessionOnVirtualContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).CreateAppSessionOnVirtualContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/CreateAppSessionOnVirtualContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).CreateAppSessionOnVirtualContract(ctx, req.(*CreateAppSessionOnVirtualContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_CreateAppSessionOnDeployedContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppSessionOnDeployedContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).CreateAppSessionOnDeployedContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/CreateAppSessionOnDeployedContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).CreateAppSessionOnDeployedContract(ctx, req.(*CreateAppSessionOnDeployedContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SubscribeAppSessionDispute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SessionID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WebApiServer).SubscribeAppSessionDispute(m, &webApiSubscribeAppSessionDisputeServer{stream})
}

type WebApi_SubscribeAppSessionDisputeServer interface {
	Send(*DisputeInfo) error
	grpc.ServerStream
}

type webApiSubscribeAppSessionDisputeServer struct {
	grpc.ServerStream
}

func (x *webApiSubscribeAppSessionDisputeServer) Send(m *DisputeInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _WebApi_SignOutgoingState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOutgoingStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SignOutgoingState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/SignOutgoingState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SignOutgoingState(ctx, req.(*SignOutgoingStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_ValidateAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).ValidateAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/ValidateAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).ValidateAck(ctx, req.(*ValidateAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SignData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SignData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/SignData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SignData(ctx, req.(*Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_ProcessReceivedState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessReceivedStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).ProcessReceivedState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/ProcessReceivedState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).ProcessReceivedState(ctx, req.(*ProcessReceivedStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SettleAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettleAppSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SettleAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/SettleAppSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SettleAppSession(ctx, req.(*SettleAppSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SettleAppSessionBySigTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettleAppSessionByTimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SettleAppSessionBySigTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/SettleAppSessionBySigTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SettleAppSessionBySigTimeout(ctx, req.(*SettleAppSessionByTimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SettleAppSessionByMoveTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettleAppSessionByTimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SettleAppSessionByMoveTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/SettleAppSessionByMoveTimeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SettleAppSessionByMoveTimeout(ctx, req.(*SettleAppSessionByTimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SettleAppSessionByInvalidTurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettleAppSessionByInvalidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SettleAppSessionByInvalidTurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/SettleAppSessionByInvalidTurn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SettleAppSessionByInvalidTurn(ctx, req.(*SettleAppSessionByInvalidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SettleAppSessionByInvalidState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettleAppSessionByInvalidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SettleAppSessionByInvalidState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/SettleAppSessionByInvalidState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SettleAppSessionByInvalidState(ctx, req.(*SettleAppSessionByInvalidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_DeleteAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).DeleteAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/DeleteAppSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).DeleteAppSession(ctx, req.(*SessionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetDeployedAddressForAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetDeployedAddressForAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/GetDeployedAddressForAppSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetDeployedAddressForAppSession(ctx, req.(*SessionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetBooleanOutcomeForAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooleanOutcomeForAppSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetBooleanOutcomeForAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/GetBooleanOutcomeForAppSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetBooleanOutcomeForAppSession(ctx, req.(*GetBooleanOutcomeForAppSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_ApplyActionForAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyActionForAppSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).ApplyActionForAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/ApplyActionForAppSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).ApplyActionForAppSession(ctx, req.(*ApplyActionForAppSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_FinalizeOnActionTimeoutForAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).FinalizeOnActionTimeoutForAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/FinalizeOnActionTimeoutForAppSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).FinalizeOnActionTimeoutForAppSession(ctx, req.(*SessionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetSettleFinalizedTimeForAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetSettleFinalizedTimeForAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/GetSettleFinalizedTimeForAppSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetSettleFinalizedTimeForAppSession(ctx, req.(*SessionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetActionDeadlineForAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetActionDeadlineForAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/GetActionDeadlineForAppSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetActionDeadlineForAppSession(ctx, req.(*SessionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetStatusForAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetStatusForAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/GetStatusForAppSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetStatusForAppSession(ctx, req.(*SessionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetStateForAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateForAppSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetStateForAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/GetStateForAppSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetStateForAppSession(ctx, req.(*GetStateForAppSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetSeqNumForAppSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetSeqNumForAppSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/GetSeqNumForAppSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetSeqNumForAppSession(ctx, req.(*SessionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_GetBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).GetBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/GetBlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).GetBlockNumber(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebApi_SetMsgDropper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMsgDropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebApiServer).SetMsgDropper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webrpc.WebApi/SetMsgDropper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebApiServer).SetMsgDropper(ctx, req.(*SetMsgDropReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "webrpc.WebApi",
	HandlerType: (*WebApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPayHistory",
			Handler:    _WebApi_GetPayHistory_Handler,
		},
		{
			MethodName: "SetDelegation",
			Handler:    _WebApi_SetDelegation_Handler,
		},
		{
			MethodName: "OpenPaymentChannel",
			Handler:    _WebApi_OpenPaymentChannel_Handler,
		},
		{
			MethodName: "Deposit",
			Handler:    _WebApi_Deposit_Handler,
		},
		{
			MethodName: "MonitorDepositJob",
			Handler:    _WebApi_MonitorDepositJob_Handler,
		},
		{
			MethodName: "CooperativeWithdraw",
			Handler:    _WebApi_CooperativeWithdraw_Handler,
		},
		{
			MethodName: "MonitorCooperativeWithdrawJob",
			Handler:    _WebApi_MonitorCooperativeWithdrawJob_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _WebApi_GetBalance_Handler,
		},
		{
			MethodName: "GetPeerFreeBalance",
			Handler:    _WebApi_GetPeerFreeBalance_Handler,
		},
		{
			MethodName: "SendConditionalPayment",
			Handler:    _WebApi_SendConditionalPayment_Handler,
		},
		{
			MethodName: "GetIncomingPaymentStatus",
			Handler:    _WebApi_GetIncomingPaymentStatus_Handler,
		},
		{
			MethodName: "GetOutgoingPaymentStatus",
			Handler:    _WebApi_GetOutgoingPaymentStatus_Handler,
		},
		{
			MethodName: "ConfirmOutgoingPayment",
			Handler:    _WebApi_ConfirmOutgoingPayment_Handler,
		},
		{
			MethodName: "RejectIncomingPayment",
			Handler:    _WebApi_RejectIncomingPayment_Handler,
		},
		{
			MethodName: "SettleOnChainResolvedIncomingPayment",
			Handler:    _WebApi_SettleOnChainResolvedIncomingPayment_Handler,
		},
		{
			MethodName: "ResolveIncomingPaymentOnChain",
			Handler:    _WebApi_ResolveIncomingPaymentOnChain_Handler,
		},
		{
			MethodName: "GetOnChainPaymentInfo",
			Handler:    _WebApi_GetOnChainPaymentInfo_Handler,
		},
		{
			MethodName: "ConfirmOnChainResolvedPayments",
			Handler:    _WebApi_ConfirmOnChainResolvedPayments_Handler,
		},
		{
			MethodName: "SettleExpiredPayments",
			Handler:    _WebApi_SettleExpiredPayments_Handler,
		},
		{
			MethodName: "IntendWithdraw",
			Handler:    _WebApi_IntendWithdraw_Handler,
		},
		{
			MethodName: "ConfirmWithdraw",
			Handler:    _WebApi_ConfirmWithdraw_Handler,
		},
		{
			MethodName: "IntendSettlePaymentChannel",
			Handler:    _WebApi_IntendSettlePaymentChannel_Handler,
		},
		{
			MethodName: "ConfirmSettlePaymentChannel",
			Handler:    _WebApi_ConfirmSettlePaymentChannel_Handler,
		},
		{
			MethodName: "GetSettleFinalizedTimeForPaymentChannel",
			Handler:    _WebApi_GetSettleFinalizedTimeForPaymentChannel_Handler,
		},
		{
			MethodName: "SyncOnChainPaymentChannelStatus",
			Handler:    _WebApi_SyncOnChainPaymentChannelStatus_Handler,
		},
		{
			MethodName: "SyncStateWithPeer",
			Handler:    _WebApi_SyncStateWithPeer_Handler,
		},
		{
			MethodName: "CreateAppSessionOnVirtualContract",
			Handler:    _WebApi_CreateAppSessionOnVirtualContract_Handler,
		},
		{
			MethodName: "CreateAppSessionOnDeployedContract",
			Handler:    _WebApi_CreateAppSessionOnDeployedContract_Handler,
		},
		{
			MethodName: "SignOutgoingState",
			Handler:    _WebApi_SignOutgoingState_Handler,
		},
		{
			MethodName: "ValidateAck",
			Handler:    _WebApi_ValidateAck_Handler,
		},
		{
			MethodName: "SignData",
			Handler:    _WebApi_SignData_Handler,
		},
		{
			MethodName: "ProcessReceivedState",
			Handler:    _WebApi_ProcessReceivedState_Handler,
		},
		{
			MethodName: "SettleAppSession",
			Handler:    _WebApi_SettleAppSession_Handler,
		},
		{
			MethodName: "SettleAppSessionBySigTimeout",
			Handler:    _WebApi_SettleAppSessionBySigTimeout_Handler,
		},
		{
			MethodName: "SettleAppSessionByMoveTimeout",
			Handler:    _WebApi_SettleAppSessionByMoveTimeout_Handler,
		},
		{
			MethodName: "SettleAppSessionByInvalidTurn",
			Handler:    _WebApi_SettleAppSessionByInvalidTurn_Handler,
		},
		{
			MethodName: "SettleAppSessionByInvalidState",
			Handler:    _WebApi_SettleAppSessionByInvalidState_Handler,
		},
		{
			MethodName: "DeleteAppSession",
			Handler:    _WebApi_DeleteAppSession_Handler,
		},
		{
			MethodName: "GetDeployedAddressForAppSession",
			Handler:    _WebApi_GetDeployedAddressForAppSession_Handler,
		},
		{
			MethodName: "GetBooleanOutcomeForAppSession",
			Handler:    _WebApi_GetBooleanOutcomeForAppSession_Handler,
		},
		{
			MethodName: "ApplyActionForAppSession",
			Handler:    _WebApi_ApplyActionForAppSession_Handler,
		},
		{
			MethodName: "FinalizeOnActionTimeoutForAppSession",
			Handler:    _WebApi_FinalizeOnActionTimeoutForAppSession_Handler,
		},
		{
			MethodName: "GetSettleFinalizedTimeForAppSession",
			Handler:    _WebApi_GetSettleFinalizedTimeForAppSession_Handler,
		},
		{
			MethodName: "GetActionDeadlineForAppSession",
			Handler:    _WebApi_GetActionDeadlineForAppSession_Handler,
		},
		{
			MethodName: "GetStatusForAppSession",
			Handler:    _WebApi_GetStatusForAppSession_Handler,
		},
		{
			MethodName: "GetStateForAppSession",
			Handler:    _WebApi_GetStateForAppSession_Handler,
		},
		{
			MethodName: "GetSeqNumForAppSession",
			Handler:    _WebApi_GetSeqNumForAppSession_Handler,
		},
		{
			MethodName: "GetBlockNumber",
			Handler:    _WebApi_GetBlockNumber_Handler,
		},
		{
			MethodName: "SetMsgDropper",
			Handler:    _WebApi_SetMsgDropper_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeIncomingPayments",
			Handler:       _WebApi_SubscribeIncomingPayments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeOutgoingPayments",
			Handler:       _WebApi_SubscribeOutgoingPayments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeAppSessionDispute",
			Handler:       _WebApi_SubscribeAppSessionDispute_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "web_api.proto",
}
